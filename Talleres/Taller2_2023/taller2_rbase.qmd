---
title: "Taller 2: Ejercicios R base"
subtitle: "Uso Avanzado de Sistemas de Información Geográfica"
institute: "Escuela de Ingeniería en Medio Ambiente, Universidad Mayor"
author: "Dr. Francisco Zambrano"
date: "2023-09-08"
lang: "es"
execute:
  echo: false
  eval: false
format:
  html:
    number-sections: true
    number-depth: 3
    smooth-scroll: true
    code-fold: show
    toc: true
    html-math-method: katex
    self-contained: true
---
# Descripción

A continuación hay una serie de ejercicios que debe resolver utilizando \``R`\`. El objetivo es comenzar a trabajar con los tipos de datos, estructuras e indexación en R.

# ¿Qué debe entregar?

Debeŕá utilizar RStudio para crear un script, en donde resolverá cada uno de los ejercicios. Debe utilizar los comentarios (`#`) para la descripción del ejercicio e incorporar cualquier texto que ayude a entender lo realizado. A modo de ejemplo:

```{r}
#| eval: false
#| echo: true
# Ejercicio 1:
# comentario explicando lo que se hace

  Aca va el script que resuelve el ejericio 1
  

```

# Ejercicios

## Vectores

1. Considere el vector: x = (4,6,5,7,10,9,4,15). ¿Cuál es el resultado de?: x < 7 ?

```{r}
x <- c(4,6,5,7,10,9,4,15)
x < 7
```

2. Considere los dos vectores p = (3, 5, 6, 8) y q = (3, 3, 3). ¿Cuál es el resultado de p+q? ¿Qué pasa cuando se suman vectores con diferente cantidad de elementos?

3. Considere los dos vectores, x = (4,6,5,7,10,9,4,15) e y = (0,10,1,8,2,3,4,1). ¿Cuál es el resultado de `x*y`?

4. Considere los dos vectores a = (1,2,4,5,6) y b = (3,2,4,1,9). ¿Cuál es el resultado de `cbind(a,b)`?

5. Considere los dos vectores, a, b a = (10,2,4,15) y b = (3,12,4,11). ¿Cuál es el resultado de `rbind(a,b)`?

6. Determine cuantos elementos tiene el vector `letters`

7. Del vector `letters` extraiga las letras `a`, `o` y `w` usando indexación.

8. Considere el siguiente vector v = (9, 4, 3, 76, 43, 22). Usando indexación extraiga el 2do y 4to elemento.

9. Del vector que se genera con el siguiente script:

```{r}
v <- runif(40,0,100)
```

Extraiga los elementos que son menores que 50 y guardelos en el objeto `v_menor_50`.

## Matrices

1. Cree 2 vectores A y B, donde A es (1,2,3) y B es (4,5,6). Con estos vectores,
- use la función cbind() o rbind() para crear una matriz de 2 por 3 a partir de los vectores. 

2. Cree una matriz de 3 por 3 que consta de los números del 1 al 9. Cree esta matriz usando  1:9 y especificando el argumento nrow en la llamada a la función Matrix(). 

3. Confirme que la matriz anterior es efectivamente una matriz usando la función `is.matrix()`

4. Cree una matriz de 5 por 5 con los números del 1 al 25 y asignela al objeto `mat2`. La primera fila debe tener los numero del 1 al 5.

5. Usando indexación, tome una subsección de `mat2` del ejercicio anterior que se ve así:  
[1] [7,8]  
[2] [12,13]

6. Determine la suma de todos los elementos de `mat2`

7. El siguiente código crea en R la matriz de 5×5 que se muestra a continuación.

```{r}
m = rbind(c(11,12,13,14,15),
            c(21,22,23,24,25),
            c(31,32,33,34,35),
            c(41,42,43,44,45),
            c(51,52,53,54,55))
m
```

Usando lo anterior, escriba código R para generar las siguientes submatrices de m:

  - la submatriz de elementos en las filas 3, 4 o 5 y en las columnas 1 o 2

  - la submatriz formada al eliminar las columnas 2 y 4

  - la submatriz de filas cuyo primer elemento de columna tiene un valor par 

## Data.frames

1. Crear un `data.frame` vacío.

```{r}
data.frame()
```

2. Crear un `data.frame` a partir de cuatro vectores dados de tipo entero, double, caracter y lógico.

```{r}
v1 <- 1:5
v2 <- c('a','b','c','d','e')
v3 <- c(TRUE,TRUE,FALSE,FALSE,TRUE)
v4 <- month.name[1:5]

df <- data.frame(numeros = v1,
           letras = v2,
           logicos = v3,
           meses = v4)
```

3. Extraer una columna específica de el `data.frame` `iris` usando el nombre de la columna.

```{r}
#iris es el data.frame dado, es decir cualquier data.frame
iris$Sepal.Length
```

4. Extraer las filas 3 y 5 con las columnas 1 y 3 de el `data.frame` `mtcars`.

```{r}
#iris es el data.frame dado, es decir cualquier data.frame
iris[c(3,5),c(1,3)]
```


5. Eliminar dos columna por nombre de el `data.frame` `mtcars`.

```{r}
#iris es el data.frame dado, es decir cualquier data.frame
iris$Sepal.Length <- NULL #para una sola columna
iris[c(1,3)] <- NULL #para eliminar más de una
```

6. Agregar una nueva columna al `data.frame` `iris`.

```{r}
iris$nueva_columna <- 150:1
```

7. Ordenar el `data.frame` `iris` por las columns `Sepal.Length` y `Sepal.Width`.

```{r}
data("iris") #carga el data.frame iris original
iris_sub <- iris[1:5,] #considera solo los 5 primeras filas de iris
pos <- order(iris_sub$Sepal.Length,iris_sub$Sepal.Width) #ordena por las variables Sepal.Length y Sepal.Width del data.frame iris y devuelve la posición de los elementos ordenados
iris_sub[pos,] #luego puedo hacer indexación con el vector con las posiciones ordenadas

```

8. Para el set de datos `airquality`, reemplazar los valores `NA` de la columna `Ozone` con 3 de la columna `Solar.R` con 99.

```{r}
df <-data.frame(a= c(1,2,NA,4,8),b = c(NA,'a','b',NA,NA))
df[is.na(df)] <- 3 #is.na pregunta que elementos son NA en df, a esos se le asigna el valor 3
df
```

9. Cambiar más de un nombre de columna de un `data.frame` dado.

```{r}
exam_data <- data.frame(
  name = c('Anastasia', 'Dima', 'Katherine', 'James', 'Emily', 'Michael', 'Matthew', 'Laura', 'Kevin', 'Jonas'),
  score = c(12.5, 9, 16.5, 12, 9, 20, 14.5, 13.5, 8, 19),
  attempts = c(1, NA, 2, NA, 2, NA, 1, NA, 2, 1),
  qualify = c('yes', 'no', 'yes', 'no', 'no', 'yes', 'yes', 'no', 'no', 'yes')
)

exam_data #data.frame original

# cambia mas de un nombre de columna del data.frame original
colnames(exam_data)[which(names(exam_data) == "name")] = "student_name"
colnames(exam_data)[which(names(exam_data) == "score")] = "avg_score"
exam_data
```

10. Cuente el número de valores NA en las columnas el `data.frame` `airquality`.

```{r}
exam_data <- data.frame(
  name = c('Anastasia', 'Dima', 'Katherine', 'James', 'Emily', 'Michael', 'Matthew', 'Laura', 'Kevin', 'Jonas'),
  score = c(12.5, 9, 16.5, 12, 9, 20, 14.5, 13.5, 8, 19),
  attempts = c(1, NA, 2, NA, 2, NA, 1, NA, 2, 1),
  qualify = c('yes', 'no', 'yes', 'no', 'no', 'yes', 'yes', 'no', 'no', 'yes')
)
exam_data
#El número de NA en la columna `attempts`
sum(is.na(exam_data$attempts))
```

11. Cree un `data.frame` utilizando dos vectores dados y muestre.

```{r}
a <- c(10,20,10,10,40,50,20,30)
b <- c(10,30,10,20,0,50,30,30)
ab <- data.frame(a,b)

# muestra elementos duplicados
duplicated(ab)
#muestra filas únicas de los data.frame
unique(ab)
```

12. Llame al conjunto de datos (incorporado) `airquality`. Elimine las variables 'Solar.R' y 'Wind' y muestre el `data.frame`.

```{r}
data <- airquality
head(data)

#eliminar las columnas Solar.R y Wind
data[,c("Solar.R")]=NULL
data[,c("Wind")]=NULL
head(data)
```

13. Escriba un programa R para llamar al conjunto de datos (integrado) `airquality`. ¿Comprueba si es un `data.frame` o no? Ordene todo el `data.frame` por la primera y segunda columna. (ver `?order`)

```{r}
data <- airquality
head(data)
class(data)
#ordena por la primera y segunda columna
result <- data[order(data[,1],data[,2]),]
head(result)
```


