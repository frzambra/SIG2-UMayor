---
title: "Taller 2: Ejercicios R base"
subtitle: "Uso Avanzado de Sistemas de Información Geográfica"
institute: "Escuela de Ingeniería en Medio Ambiente, Universidad Mayor"
author: "Dr. Francisco Zambrano"
date: "2023-09-08"
lang: "es"
execute:
  echo: true
  eval: true
format:
  html:
    number-sections: true
    number-depth: 3
    smooth-scroll: true
    code-fold: show
    toc: true
    html-math-method: katex
    self-contained: true
---
# Descripción

A continuación hay una serie de ejercicios que debe resolver utilizando \``R`\`. El objetivo es comenzar a trabajar con los tipos de datos, estructuras e indexación en R.

# ¿Qué debe entregar?

Debeŕá utilizar RStudio para crear un script, en donde resolverá cada uno de los ejercicios. Debe utilizar los comentarios (`#`) para la descripción del ejercicio e incorporar cualquier texto que ayude a entender lo realizado. A modo de ejemplo:

```{r}
#| eval: false
#| echo: true
# Ejercicio 1:
# comentario explicando lo que se hace

  Aca va el script que resuelve el ejericio 1
  

```

# Ejercicios

## Data.frames

1. Escriba un programa en R para crear un `data.frame` vacío.

```{r}
data.frame()
```

2. Escriba un programa en R para crear un `data.frame` a partir de cuatro vectores dados.

```{r}
v1 <- 1:5
v2 <- c('a','b','c','d','e')
v3 <- c(TRUE,TRUE,FALSE,FALSE,TRUE)
v4 <- month.name[1:5]

df <- data.frame(numeros = v1,
           letras = v2,
           logicos = v3,
           meses = v4)
```

3. Escriba un programa R para extraer una columna específica de un `data.frame` usando el nombre de la columna.

```{r}
#iris es el data.frame dado, es decir cualquier data.frame
iris$Sepal.Length
```

4. Escriba un programa en R para extraer las filas 3 y 5 con las columnas 1 y 3 de un `data.frame` dado.

```{r}
#iris es el data.frame dado, es decir cualquier data.frame
iris[c(3,5),c(1,3)]
```


5. Escriba un programa en R para eliminar la(s) columna(s) por nombre de un `data.frame` dado.

```{r}
#iris es el data.frame dado, es decir cualquier data.frame
iris$Sepal.Length <- NULL #para una sola columna
iris[c(1,3)] <- NULL #para eliminar más de una
```

6. Escriba un programa en R para agregar una nueva columna en un `data.frame` determinado.

```{r}
iris$nueva_columna <- 150:1
```

7. Escriba un programa en R para ordenar un `data.frame` dado por varias columnas.

```{r}
data("iris") #carga el data.frame iris original
iris_sub <- iris[1:5,] #considera solo los 5 primeras filas de iris
pos <- order(iris_sub$Sepal.Length,iris_sub$Sepal.Width) #ordena por las variables Sepal.Length y Sepal.Width del data.frame iris y devuelve la posición de los elementos ordenados
iris_sub[pos,] #luego puedo hacer indexación con el vector con las posiciones ordenadas

```


8. Escriba un programa en R para crear uniones (fusiones) internas, externas, izquierdas y derechas a partir de dos `data.frames` dados.

```{r}
df1 <- data.frame(numid = c(12, 14, 10, 11))
df2 <- data.frame(numid = c(13, 15, 11, 12))

#union izquierda
(result <- merge(df1, df2, by = "numid", all.x = TRUE))

#union derecha
(result <- merge(df1, df2, by = "numid", all.y = TRUE))

#union externa
(result <- merge(df1, df2, by = "numid", all = TRUE))

# union cruzada
(result <- merge(df1, df2, by = NULL))
```

9. Escriba un programa R para reemplazar los valores de NA con 3 en un `data.frame` dado.

```{r}
df <-data.frame(a= c(1,2,NA,4,8),b = c(NA,'a','b',NA,NA))
df[is.na(df)] <- 3 #is.na pregunta que elementos son NA en df, a esos se le asigna el valor 3
df
```


10. Escriba un programa R para cambiar más de un nombre de columna de un `data.frame` dado.

```{r}
exam_data <- data.frame(
  name = c('Anastasia', 'Dima', 'Katherine', 'James', 'Emily', 'Michael', 'Matthew', 'Laura', 'Kevin', 'Jonas'),
  score = c(12.5, 9, 16.5, 12, 9, 20, 14.5, 13.5, 8, 19),
  attempts = c(1, NA, 2, NA, 2, NA, 1, NA, 2, 1),
  qualify = c('yes', 'no', 'yes', 'no', 'no', 'yes', 'yes', 'no', 'no', 'yes')
)

exam_data #data.frame original

# cambia mas de un nombre de columna del data.frame original
colnames(exam_data)[which(names(exam_data) == "name")] = "student_name"
colnames(exam_data)[which(names(exam_data) == "score")] = "avg_score"
exam_data
```

11. Escriba un programa R para comparar dos `data.frame` para encontrar las filas en el primer `data.frame` que no están presentes en el segundo data.frame. (ver `?setdiff`)

```{r}
df_90 = data.frame(
  item = c("item1", "item2", "item3"),
  Jan_sale = c(12, 14, 12),
  Feb_sale = c(11, 12, 15),
  Mar_sale = c(12, 14, 15)
)
df_91 = data.frame(
  item = c("item1", "item2", "item3"),
  Jan_sale = c(12, 14, 12),
  Feb_sale = c(11, 12, 15),
  Mar_sale = c(12, 15, 18)
)
#data.frames originales 
df_90
df_91
# imprime las filas en el primer data.frame que no están presentes en el segundo
setdiff(df_90,df_91)
```

12. Escriba un programa en R para encontrar elementos que estén presentes en dos `data.frames` dados. (ver `?intersect`)

```{r}
a <- c("a", "b", "c", "d", "e")
b <- c("d", "e", "f", "g")

#elementos que están presentes en ambos data.frames
result <- intersect(a, b)
```

13. Escriba un programa en R para encontrar elementos que vienen solo una vez y que son comunes a ambos `data.frames` dados. (ver `?union`)
```{r}
a <- c("a", "b", "c", "d", "e")
b <- c("d", "e", "f", "g")
# encuentra elementos que están en los dos 
result <- union(a, b)
result
```

14. Escriba un programa R para contar el número de valores NA en una columna de `data.frames`.

```{r}
exam_data <- data.frame(
  name = c('Anastasia', 'Dima', 'Katherine', 'James', 'Emily', 'Michael', 'Matthew', 'Laura', 'Kevin', 'Jonas'),
  score = c(12.5, 9, 16.5, 12, 9, 20, 14.5, 13.5, 8, 19),
  attempts = c(1, NA, 2, NA, 2, NA, 1, NA, 2, 1),
  qualify = c('yes', 'no', 'yes', 'no', 'no', 'yes', 'yes', 'no', 'no', 'yes')
)
exam_data
#El número de NA en la columna `attempts`
sum(is.na(exam_data$attempts))
```

15. Escriba un programa en R para crear un `data.frame` utilizando dos vectores dados y muestre los elementos duplicados y las filas únicas de dicho `data.frame`. (ver `?duplicated`)

```{r}
a <- c(10,20,10,10,40,50,20,30)
b <- c(10,30,10,20,0,50,30,30)
ab <- data.frame(a,b)

# muestra elementos duplicados
duplicated(ab)
#muestra filas únicas de los data.frame
unique(ab)
```

16. Escriba un programa en R para llamar al conjunto de datos (incorporado) `airquality`. Elimine las variables 'Solar.R' y 'Wind' y muestre el `data.frame`.

```{r}
data <- airquality
head(data)

#eliminar las columnas Solar.R y Wind
data[,c("Solar.R")]=NULL
data[,c("Wind")]=NULL
head(data)
```

17. Escriba un programa R para llamar al conjunto de datos (integrado) `airquality`. ¿Comprueba si es un `data.frame` o no? Ordene todo el `data.frame` por la primera y segunda columna. (ver `?order`)

```{r}
data <- airquality
head(data)
class(data)
#ordena por la primera y segunda columna
result <- data[order(data[,1],data[,2]),]
head(result)
```

## Listas

1. Escriba un programa R para crear una lista que contenga un vector, una matriz y una lista y asigne nombres a los elementos de la lista.

```{r}
l <- list(e1 = 1:10,
          e2 = matrix(1:9,3),
          e3 = list(1:3))
l
```

2. Escriba un programa en R para crear una lista que contenga un vector, una matriz y una lista y asigne nombres a los elementos de la lista. Accede al primer y segundo elemento de la lista.

```{r}
list_data <- list(
  c("Red","Green","Black"), 
  matrix(c(1,3,5,7,9,11), nrow = 2),
  list("Python", "PHP", "Java"))
list_data #lista

#asigna nombres a los elementos de una lista
names(list_data) = c("Color", "Odd numbers", "Language(s)")

list_data

#primer elemento
list_data[[1]]
#segundo elemento
list_data[[2]]
```

3. Escriba un programa R para crear una lista que contenga un vector, una matriz y una lista y agregue un elemento al final de la lista.

```{r}
list_data <- list(
  c("Red","Green","Black"), 
  matrix(c(1,3,5,7,9,11), nrow = 2),
  list("Python", "PHP", "Java"))

list_data

#agregar un elemento al final de la lista
list_data[4] = "New element"
list_data
```

4. Escriba un programa en R para seleccionar el segundo elemento de una lista anidada determinada.

```{r}
x <- list(list(0,2), list(3,4), list(5,6))
x
e <- lapply(x, '[[', 2)
#Segundo elemento de la lista anidada
e
```

5. Escriba un programa R para fusionar dos listas dadas en una lista.

```{r}
n1 <- list(1,2,3)
c1 <- list("Red", "Green", "Black")
n1
c1

#dos listas unidas
mlist <-  c(n1, c1)
mlist
```

6. Escriba un programa en R para convertir una lista dada en vector.

```{r}
n1 <- list(1,2,3)
c1 <- list(4,5,6)
n1
c1
#convertir las listas en vectores
v1 <- unlist(n1)
v1
```

7. Escriba un programa en R para crear una lista de `data.frames` y acceda a cada uno de esos `data.frames` de la lista.

```{r}
df1 <- data.frame(y1 = c(0, 1, 2), y2 = c(3, 4, 5))
df2 <- data.frame(y1 = c(6, 7, 8), y2 = c(9, 10, 11))
new_list <- list(df1, df2)

#lista con dos data.frames
new_list

#data.frame 1
new_list[[1]]
#data.frame 2
new_list[[2]]
```

8. Escriba un programa R para contar el número de objetos en una lista dada.

```{r}
list_data <- list(
  c("Red","Green","Black"), 
  matrix(c(1,3,5,7,9,11), nrow = 2),
  list("Python", "PHP", "Java"))

list_data
#número de elementos de la lista
length(list_data)
```

9. Escriba un programa en R para convertir una matriz dada en una lista.

```{r}
m <- matrix(1:10,nrow=2, ncol=2)
m

l <- split(m, rep(1:ncol(m), each = nrow(m)))

#lista obtenida de la matriz
l
```

10. Escriba un programa R para asignar NULL a un elemento de lista dado.

```{r}
l <- list(1, 2, 3, 4, 5)
l

#asigna NULL al 2do y 3er elemento de la lista
l[2] <- list(NULL) 
l[3] <- list(NULL) 
l
```

11. Escriba un programa R para crear una lista llamada `s` que contenga una secuencia de 15 letras mayúsculas, comenzando desde 'E'.

```{r}
l <- LETTERS[match("E", LETTERS):(match("E", LETTERS)+15)]
l
```

12. Escriba un programa R para asignar nuevos nombres "a", "b" y "c" a los elementos de una lista dada.

```{r}
list1 <- list(g1 = 1:10, g2 = "R Programming", g3 = "HTML")
list1
list1 = c("a", "b", "c")
list1
```

13. Escriba un programa en R para obtener la longitud de los dos primeros vectores de una lista dada.

```{r}
list1 <- list(g1 = 1:10, g2 = "R Programming", g3 = "HTML")
list1
#longitud de los elementos de la lista
length(list1$g1)
length(list1$g2)
```

14. Escriba un programa R para encontrar todos los elementos de una lista dada que no están en otra lista dada. (ver `?setdiff`)

```{r}
l1 <- list("x", "y", "z")
l2 <- list("X", "Y", "Z", "x", "y", "z")
l1
l2
#todos los elemntos de l2 que no están en l1
setdiff(l2, l1)
```

