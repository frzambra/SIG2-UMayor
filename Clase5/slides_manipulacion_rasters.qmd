---
title: "Operaciones espaciales con datos rasters"
author: "Dr. Francisco Zambrano"
format: 
  revealjs:
    slide-number: true
    #title-slide-attributes: 
      #data-background-image: "https://media.giphy.com/media/GldXiKXeO7hpczEHxt/giphy.gif"
      #data-background-size: "contain"
    title-block-banner: true
    logo: ../img/logo_hemera_2024.png
    css: ../logo.css
    theme: default
    echo: true
---

## Contenidos {.smaller .scrollable background-image="https://rspatial.github.io/terra/reference/figures/logo.png" background-position="97.5% 2.5%" background-size="7.5%"}

::: incremental
1.  Subconjunto espaciales con datos raster
2.  Algebra raster
:::

# 1. Subconjunto espacial raster {background-color="orange"}

## Subconjunto espacial {.smaller .scrollable background-image="https://rspatial.github.io/terra/reference/figures/logo.png" background-position="97.5% 2.5%" background-size="7.5%"}

```{r}
#| fig-align: center
library(spData)
library(terra)
elev <- rast(system.file("raster/elev.tif", package = "spData"))
grain <- rast(system.file("raster/grain.tif", package = "spData"))
par(mfrow=c(1,2))
plot(elev,main = 'elev');text(elev);
plot(grain,main = 'grain');text(grain)
```

## Subconjunto espacial {.smaller .scrollable background-image="https://rspatial.github.io/terra/reference/figures/logo.png" background-position="97.5% 2.5%" background-size="7.5%"}

Extrae la posición de la celda con `cellFromXY` y luego con indexación extrae el valor de esa celda con `elev[id]`
```{r}
id = cellFromXY(elev, xy = matrix(c(0.1, 0.1), ncol = 2))
elev[id]
```

Extrae el valor que se encuentra en las coordenadas indicadas con la función `extract`

```{r}
terra::extract(elev, matrix(c(0.1, 0.1), ncol = 2))
```

## Subconjunto espacial {.smaller .scrollable background-image="https://rspatial.github.io/terra/reference/figures/logo.png" background-position="97.5% 2.5%" background-size="7.5%"}

También se puede extraer utilizando otro raster, como rater de indexación.

```{r}
#| fig-align: center
clip <- rast(xmin = 0.9, xmax = 1.8, ymin = -0.45, ymax = 0.45,
            resolution = 0.3, vals = rep(1, 9))
par(mfrow = c(1,2))
plot(elev);text(elev)
```

## Subconjunto espacial {.smaller .scrollable background-image="https://rspatial.github.io/terra/reference/figures/logo.png" background-position="97.5% 2.5%" background-size="7.5%"}

También se puede extraer utilizando otro raster, como rater de indexación.

```{r}
#| fig-align: center
clip <- rast(xmin = 0.9, xmax = 1.8, ymin = -0.45, ymax = 0.45,
            resolution = 0.3, vals = rep(1, 9),crs="EPSG:4326")
par(mfrow = c(1,2))
plot(elev);text(elev)
plot(clip,add = TRUE)
```
## Subconjunto espacial {.smaller .scrollable background-image="https://rspatial.github.io/terra/reference/figures/logo.png" background-position="97.5% 2.5%" background-size="7.5%"}

Extraer desde el objeto `elev` los valores que se encuentran en la extensión del objeto `clip`
```{r}
elev[clip]
```

## Subconjunto espacial {.smaller .scrollable background-image="https://rspatial.github.io/terra/reference/figures/logo.png" background-position="97.5% 2.5%" background-size="7.5%"}

**Con indexación**

::: {.columns}
::: {.column width=50%}
```{r}
elev[1:2,]
```
:::
::: {.column width=50%}
```{r}
elev[1:2,drop = FALSE]
```
:::
:::

## Subconjunto espacial {.smaller .scrollable background-image="https://rspatial.github.io/terra/reference/figures/logo.png" background-position="97.5% 2.5%" background-size="7.5%"}

Utilizando un raster con valores `NA` para ser utilizado como mascara

```{r}
rmask <- elev
values(rmask) <- sample(c(FALSE, TRUE), 36, replace = TRUE)
par(mfrow = c(1,2))
plot(elev);text(elev)
plot(rmask)
```

## Subconjunto espacial {.smaller .scrollable background-image="https://rspatial.github.io/terra/reference/figures/logo.png" background-position="97.5% 2.5%" background-size="7.5%"}

```{r}
em <- elev[rmask,drop = FALSE]
par(mfrow = c(1,2))
plot(elev);text(elev)
plot(em);text(em)
```


Utilizando un raster con valores `NA` para ser utilizado como mascara con la función `mask`

```{r}
par(mfrow = c(1,2))
plot(elev);text(elev)
plot(rmask,add = TRUE)
```

## Subconjunto espacial {.smaller .scrollable background-image="https://rspatial.github.io/terra/reference/figures/logo.png" background-position="97.5% 2.5%" background-size="7.5%"}

Utilizando un raster con valores `NA` para ser utilizado como mascara. 

Se puede utilizar la función `mask`

```{r}
rmask[isFALSE(rmask)] <- NA #transforma FALSE to NA para aplicar mask
em <- mask(elev,rmask) 
par(mfrow = c(1,2))
plot(elev);text(elev)
plot(em);text(em)
```

## Subconjunto espacial {.smaller .scrollable background-image="https://rspatial.github.io/terra/reference/figures/logo.png" background-position="97.5% 2.5%" background-size="7.5%"}

Se pueden crear mascaras con operaciones lógicas.

```{r}
m <- elev
m[m >30] <- NA
em2 <- mask(elev,m)
par(mfrow = c(1,2))
plot(elev);text(elev)
plot(em2);text(em2)
```


# 2. Algebra raster {background-color="grey"}

## 2. Algebra raster {.smaller .scrollable background-image="https://rspatial.github.io/terra/reference/figures/logo.png" background-position="97.5% 2.5%" background-size="7.5%"}

Algunas consideraciones

. . .

-   Si usas multiples raster, estos deben tener el mismo punto origen[^1] y la misma resolución
-   Generalmenet tienen la misma extensión, pero si no, devuelve la operación dentro de la intersección de los dos
-   El reciclado de raster en operaciones algebraicas funciona de las misma forma que en el caso de los `atomic vectors`

[^1]: el punto más cercano a la coordenada c(0,0)

## 2. Algebra raster {.smaller .scrollable background-image="https://rspatial.github.io/terra/reference/figures/logo.png" background-position="97.5% 2.5%" background-size="7.5%"}

Muchas de las operaciones genéricas han sido implementadas

. . .

-   Operaciones: `+, -, *, /,`
-   Operadores lógicos: `>, >=, <, ==, !`
-   Funciones como: `abs, round, ceiling, floor, trunc, sqrt, log, log10, exp, cos, sin, atan, tan, max, min, range, prod, sum, any, all`

## 2. Algebra raster {.smaller .scrollable background-image="https://rspatial.github.io/terra/reference/figures/logo.png" background-position="97.5% 2.5%" background-size="7.5%"}

### Operaciones locales
```{r}
e1 <- elev + elev
e2<- elev^2
e3 <- log(elev)
e4 <- elev > 5
par(mfrow=c(1,4))
plot(e1,main = 'elev+elev')
plot(e2,main = 'elev^2')
plot(e3,main = 'log(elev)')
plot(e4,main = 'elev > 5')
```

## 2. Algebra raster {.smaller .scrollable background-image="https://rspatial.github.io/terra/reference/figures/logo.png" background-position="97.5% 2.5%" background-size="7.5%"}

### Reclasificación

Agrupamos los valores por un rango que define una clase y se le asigna un valor

```{r}
rcl <- matrix(c(0, 12, 1, 12, 24, 2, 24, 36, 3), ncol = 3, byrow = TRUE)
rcl
```

## 2. Algebra raster {.smaller .scrollable background-image="https://rspatial.github.io/terra/reference/figures/logo.png" background-position="97.5% 2.5%" background-size="7.5%"}

### Reclasificación

```{r}
recl <- classify(elev, rcl = rcl)
par(mfrow = c(1,2))
plot(elev);text(elev)
plot(recl);text(recl)
```

## 2. Algebra raster {.smaller .scrollable background-image="https://rspatial.github.io/terra/reference/figures/logo.png" background-position="97.5% 2.5%" background-size="7.5%"}

Funciones de resumen: `min`, `max`, `mean`, `prod`, `sum`, `Median`, `cv`, `range`, `any`, `all`, siempre devuelven un `SpatRaster`

```{r}
mr <- c(e1,e2,e3,e4) #raster multicapa
names(mr) <- c('elev+elev','elev^2','log(elev)','elev > 5')
plot(mr)
```

## 2. Algebra raster {.smaller .scrollable background-image="https://rspatial.github.io/terra/reference/figures/logo.png" background-position="97.5% 2.5%" background-size="7.5%"}

Funciones de resumen: `min`, `max`, `mean`, `prod`, `sum`, `Median`, `cv`, `range`, `any`, `all`, siempre devuelven un `SpatRaster`

```{r}
mr_mean <- mean(mr)
mr_max <- max(mr)
mr_min <- min(mr)
mr_sum <- sum(mr)
par(mfrow= c(1,4))
plot(mr_mean);plot(mr_max);plot(mr_min);plot(mr_sum)
```

## 2. Algebra raster {.smaller .scrollable background-image="https://rspatial.github.io/terra/reference/figures/logo.png" background-position="97.5% 2.5%" background-size="7.5%"}

### Operaciones globales

Usar `global` para obtener un valor resumen de todo el raster. En general operaciones de estadística descriptiva.

```{r}
global(e1, 'mean')
global(e1, 'max')
global(e1, 'min')
global(e1, 'sum')

```

## 2. Algebra raster {.smaller .scrollable background-image="https://rspatial.github.io/terra/reference/figures/logo.png" background-position="97.5% 2.5%" background-size="7.5%"}

### Operaciones globales

Cuando se aplica sobre un raster multicapa, devuleve el resultado de la función sobre cada capa del raster.

::: {.columns}
::: {.column width=50%}
```{r}
global(mr, 'mean')
global(mr, 'max')
```
:::
::: {.column width=50%}
```{r}
global(mr, 'min')
global(mr, 'sum')
```
:::
:::


<!-- # 3. Funciones con {terra} {background-color="lightblue"} -->

<!-- ## 3. Funciones con {terra} {.smaller .scrollable background-image="https://rspatial.github.io/terra/reference/figures/logo.png" background-position="97.5% 2.5%" background-size="7.5%"} -->

<!-- ### Modificar objetos raster -->

<!-- -   `crop` corta un raster de mayor tamaño. -->

<!-- -   `draw` permite crear una extensión de forma visual, el resultado se puede usar con la función `crop`. -->

<!-- -   `trim` remueve las filas/columnas externas que tienen valores `NA` -->

<!-- -   `extend` agrega filas/columnas con valores `NA`. -->

<!-- -   `merge` une dos raster en uno. Los raster de entrada deben tener la misma resolución y origen. -->

<!-- -   `aggregate` y `disagg` permite cambiar la resolución de un objeto raster. Con `aggregate` debes especificar una función, por defecto `mean`. -->

<!-- ## 3. Funciones con {terra} {.smaller .scrollable background-image="https://rspatial.github.io/terra/reference/figures/logo.png" background-position="97.5% 2.5%" background-size="7.5%"} -->

<!-- ### Modificar objetos raster -->

<!-- -   `resample` ajusta dos raster que no calzan, en términos de origen y resolución. -->

<!--     -   Nearest Neighboor o bilinear -->

<!-- -   `shift` para ajustar desfase lineal. -->

<!-- -   `project` para cambiar el `CRS` -->

<!-- -   `extract` para extraer valores de un raster basado en una capa vectorial -->

<!-- ## 3. Funciones con {terra} {.smaller .scrollable background-image="https://rspatial.github.io/terra/reference/figures/logo.png" background-position="97.5% 2.5%" background-size="7.5%"} -->

<!-- ### Modificar objetos raster -->

<!-- `aggregate` -->

<!-- ```{r fig.show='hide'} -->
<!-- r <- rast(ncol=10,nrow=5) -->
<!-- values(r) <- 1:ncell(r) -->
<!-- res(r) -->
<!-- plot(r) -->
<!-- text(r) -->
<!-- ``` -->

<!-- ## 3. Funciones con {terra} {.smaller .scrollable background-image="https://rspatial.github.io/terra/reference/figures/logo.png" background-position="97.5% 2.5%" background-size="7.5%"} -->

<!-- ### Modificar objetos raster -->

<!-- `aggregate` -->

<!-- ```{r echo = FALSE,fig.height=5} -->
<!-- plot(r) -->
<!-- text(r) -->
<!-- ``` -->

<!-- ## 3. Funciones con {terra} {.smaller .scrollable background-image="https://rspatial.github.io/terra/reference/figures/logo.png" background-position="97.5% 2.5%" background-size="7.5%"} -->

<!-- ### Modificar objetos raster -->

<!-- `aggregate` -->

<!-- ```{r fig.height=4} -->
<!-- ra <- aggregate(r, 2) -->
<!-- plot(ra) -->
<!-- text(ra) -->
<!-- ``` -->

<!-- ## 3. Funciones con {terra} {.smaller .scrollable background-image="https://rspatial.github.io/terra/reference/figures/logo.png" background-position="97.5% 2.5%" background-size="7.5%"} -->

<!-- ### Modificar objetos raster -->

<!-- `disaggregate` -->

<!-- ```{r fig.height=4} -->
<!-- rd <- disagg(ra, 2) -->
<!-- plot(rd) -->
<!-- text(rd) -->
<!-- ``` -->

<!-- ## 3. Funciones con {terra} {.smaller .scrollable background-image="https://rspatial.github.io/terra/reference/figures/logo.png" background-position="97.5% 2.5%" background-size="7.5%"} -->

<!-- ### Modificar objetos raster -->

<!-- `crop` -->

<!-- ```{r fig.height=4, fig.width=10} -->
<!-- r1 <- crop(r, ext(-50,50,-30,50)) -->
<!-- r2 <- crop(r, ext(30,180,10, 90)) -->
<!-- par(mfrow = c(1,2)) -->
<!-- plot(r1);text(r1); plot(r2); text(r2) -->
<!-- ``` -->

<!-- ## 3. Funciones con {terra} {.smaller .scrollable background-image="https://rspatial.github.io/terra/reference/figures/logo.png" background-position="97.5% 2.5%" background-size="7.5%"} -->

<!-- ### Modificar objetos raster -->

<!-- `mask` -->

<!-- ```{r fig.height=4, fig.width=10} -->
<!-- msk <- r -->
<!-- msk[sample(ncell(r),10)] <- NA -->
<!-- msk[!is.na(msk)] <- 10 -->
<!-- par(mfrow = c(1,2)) -->
<!-- plot(r);text(r); plot(msk); text(msk) -->
<!-- ``` -->

<!-- ## 3. Funciones con {terra} {.smaller .scrollable background-image="https://rspatial.github.io/terra/reference/figures/logo.png" background-position="97.5% 2.5%" background-size="7.5%"} -->

<!-- ### Modificar objetos raster -->

<!-- `mask` -->

<!-- ```{r fig.height=4, fig.width=10} -->
<!-- rmsk <- mask(r,msk) -->
<!-- plot(rmsk);text(rmsk) -->
<!-- ``` -->

<!-- ## 3. Funciones con {terra} {.smaller .scrollable background-image="https://rspatial.github.io/terra/reference/figures/logo.png" background-position="97.5% 2.5%" background-size="7.5%"} -->

<!-- ### Modificar objetos raster -->

<!-- `merge` -->

<!-- ```{r fig.height = 5} -->
<!-- m <- merge(r1, r2) -->
<!-- plot(m); text(m) -->
<!-- ``` -->

<!-- ## 3. Funciones con {terra} {.smaller .scrollable background-image="https://rspatial.github.io/terra/reference/figures/logo.png" background-position="97.5% 2.5%" background-size="7.5%"} -->

<!-- ### Modificar objetos raster -->

<!-- `flip` -->

<!-- ```{r fig.height = 5} -->
<!-- f <- flip(m,'horizontal') -->
<!-- plot(f); text(f) -->
<!-- ``` -->
