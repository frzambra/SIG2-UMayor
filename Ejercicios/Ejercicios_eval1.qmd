---
title: "Ejercicios Evaluación 1"
format: 
  html:
    number-sections: false
    table-of-contents: true
lang: es
editor: visual
---

# Vectores

## Ejercicio 1

Comencemos muy fácil (no se preocupe, pasaremos rápidamente a problemas más desafiantes) con un vector que contiene solo un número, al que también llamamos escalar. Ingrese un vector en R, simplemente escribiendo un número aleatorio, p. 100, cuando se le solicite y presione la tecla Intro.

## Ejercicio 2

¡Excelente! ¡Acabas de crear tu primer vector! Ahora, primero ingresemos un vector con más de un número. P.ej. un vector que contiene los números 1, 2, 3, 4, 5, en ese orden. Si ingresa estos números así, R responderá con un mensaje de error. Lanza un error, porque necesita un poco más de información de nuestro lado de que realmente queremos almacenar esos números en una estructura vectorial. Tenemos que usar la siguiente notación para esto:

c(1, 2, 3, 4, 5).

Ahora, ingrese un vector con los primeros 5 números pares en R y presione Enter.

## Ejercicio 3

Ahora ingresemos un vector mucho más largo, que contenga los números del 1 al 10, 10 veces (utilice copiar y pegar). ¿Qué significan los números entre corchetes en la salida R?

## Ejercicio 4

Debería estar bastante familiarizado con la introducción de vectores ahora. Puede que te sientas un poco aburrido escribiendo todos estos números. La vida sería bastante miserable si tuviéramos que ingresar datos de esta manera una y otra vez en R. Pero, afortunadamente, ¡hay una buena solución! Podemos asignar un vector a un nombre de variable de modo que podamos recuperar los datos que hemos ingresado, convenientemente simplemente escribiendo el nombre de la variable.

Intente asignar un vector que contenga los números 1, 2, 3, 4, 5 a una variable llamada a, usando el operador de asignación (\<-), y vea cuál de las siguientes declaraciones funciona.

Ingrese cada una de las 9 declaraciones una a la vez en el indicador, presione Entrar e intente recuperar el contenido de a, escribiendo a en el indicador después de ingresar cada declaración:

```{r}
#| eval: false


a<-c(1, 2, 3, 4, 5)
a <- c(50, 60, 70, 80, 90)
a -> c(20, 31, 42, 53, 64)
c(5, 6, 7, 9, 10) <- un
c(101, 102, 103, 104, 105) -> un
a < - c(11, 12, 13, 14, 15)
a < -c(100, 99, 88, 77, 66)
```

## Ejercicio 5

En un script R, es posible que haya creado docenas o incluso cientos de vectores. En ese caso, nombrarlos a, b, c, etc. no es ideal, porque será difícil hacer un seguimiento de lo que realmente significan todas esas letras. Este problema se mitiga fácilmente mediante el uso de nombres de variables más largos y significativos.

Asigne los siguientes vectores a un nombre de variable significativo:

```{r}
c(2, 4, 6, 8, 10, 12, 14, 16, 20)
0
3.141593
c(1, 10, 100, 1000, 10000, 100000)
```

## Ejercicio 6

Cree vectores que correspondan a los siguientes nombres de variables:

```{r}
#| eval: false
IMC
años
días por mes
primeroCincoPrimosNúmeros
```

## Ejercicio 7

Hasta ahora, hemos creado vectores a partir de un montón de números. Sin embargo, en lugar de números, también puede ingresar otros vectores, p. c(vector1, vector2, vector3) y únalos.

Para practicar esto, primero creemos tres vectores que contengan solo 1 elemento con nombres de variables p, q y r, y valores 1, 2 y 3. Luego, cree un nuevo vector que contenga múltiples elementos, usando los escalares que acabamos de crear Es decir, cree un vector `u` de longitud 3, con los elementos siguientes de `p`, `q` y `r`.

## Ejercicio 8

Para jugar un poco más con esto, creemos un vector más largo, usando solo el operador de asignación (\<-), la función c() y el vector u que acabamos de crear. Es decir, cree un nuevo vector u con longitud 96 que contenga los elementos de u de la siguiente manera: 1, 2, 3, 1, 2, 3, ...., 1, 2, 3

# Valores faltantes (NAs)

## Ejercicio 1

Si `X <- c (22,3,7,NA,NA,67)`, ¿cuál será la salida para la la instrucción R `lenght(X)`

## Ejercicio 2

Si `X = c(NA,3,14,NA,33,17,NA,41)` escriba algún código R que elimine todas las apariciones de NA en X.

## Ejercicio 3

Si `Y = c (1, 3, 12, NA, 33, 7, NA, 21)`, ¿qué instrucción de R reemplazará todas las ocurrencias de NA con 11?

## Ejercicio 4

Si `X = c(34,33,65,37,89,NA,43,NA,11,NA,23,NA)`, entonces, ¿cómo contará el número de ocurrencias de NA en X?

## Ejercicio 5

Considere el siguiente vector `W <- c(11, 3, 5, NA, 6)` Escriba algún código R que devuelva VERDADERO para el valor de W que falta en el vector.

## Ejercicio 6

Cargue el conjunto de datos 'Orange' desde R usando el comando `data(Orange)`. Reemplace todos los valores de `edad = 118` con `NA`.

## Ejercicio 7

Considere el siguiente vector `A <- c(33, 21, 12, NA, 7, 8)`. Escriba un código R que calcule la media de A sin el valor faltante.

# Matrices

## Ejercicio 1

Crea tres vectores x, y, z con números enteros y cada vector tiene 3 elementos. Combine los tres vectores para convertirse en una matriz A de 3 × 3 donde cada columna representa un vector. Cambie los nombres de las filas por `a,b,c`.

## Ejercicio 2

Verifique su resultado del Ejercicio 1, usando is.matrix(A). Debería devolver TRUE, si su respuesta es correcta. De lo contrario, por favor corrija su respuesta. Sugerencia: tenga en cuenta que is.matrix() devolverá FALSO en un tipo de entrada que no sea de matriz. Por ejemplo: un vector y así sucesivamente.

## Ejercicio 3

Crea un vector con 12 enteros. Convierta el vector en una matriz B de 4\*3 usando matrix(). Cambie los nombres de las columnas a `x, y, z` y los nombres de las filas a `a, b, c, d`. El argumento byrow en matrix() está configurado como `FALSE` de forma predeterminada. Cámbielo a TRUE e imprima B para ver las diferencias.

# data.frame

## Ejercicio 1

Cree el siguiente `data.frame`.

```{r}
#| echo: false
df <- data.frame(edad=c(25,31,23,52,76,49,26),
           altura=c(177,163,190,179,163,183,164),
           peso = c(57,69,83,75,70,83,53),
           sexo = c('F','F','M','M','F','M','F'))
row.names(df) <- c('Andrea','Ignacia','Tomas','Felipe','Paula','Cristobal','Patricia')
df
```

## Ejercicio 2

Cree el siguiente `data.frame` (asegúrese de importar la variable `trabajando` como carácter y no como factor).

```{r}
#| echo: false
df <- data.frame(trabajando = c('Si','No','No','Si','Si','No','Si'))
row.names(df) <- c('Andrea','Ignacia','Tomas','Felipe','Paula','Cristobal','Patricia')
df
```

Agregue este `data.frame` en forma de columna al anterior. a) ¿Cuántas filas y columnas tiene el nuevo marco de datos? b) ¿Qué clase de datos hay en cada columna?

## Ejercicio 3

Verifique qué clase de datos es el `state.center` (conjunto de datos incorporado) y conviértalo en un `data.frame`.

# Indexación

Respecto del set de datos `data(mtcars)` que vienen incorporados en R, realicé los siguientes ejercicios.

## Ejercicio 1

Cree un nuevo `data.frame` de nombre `mtcars2` que tenga las columnas `mpg`, `cyl` y `disp`. Hagalo de dos maneras diferentes.

## Ejercicio 2

Agregue el modelo de los autos como una nueva columna `modelo` en el `data.frame` `mtcars`

## Ejercicio 3

Cree un nuevo `data.frame` `mtcars3` en el que estén solo las filas correspondientes a los modelos de autos `Duster 360`, `Cadillac Fleetwood`, `Toyota Corolla` y `Ferrari Dino`. Hagalo de dos maneras diferentes.

## Ejercicio 4

Cree un nuevo `data.frame` `mtcars4` en el que estén las filas que cumplen la condición `hp > 100`
