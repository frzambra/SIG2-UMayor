-33.38883,-33.38846,-33.38893,-33.38929),
longitud = c(-70.63566,-70.63531,-70.63468,-70.63500,
-70.63500,-70.63461,-70.63396,-70.63435)
)
mdf_mpol <- as.matrix(df_mpol[,3:2])
mpol< - st_multipolygon(list(
list(mdf_mpol[c(1:4,1),]),
list(mdf_mpol[c(5:8,5),])
))
st_geometrycollection(list(punto,mp,ls,mls,pol,mpol))
mdf_mpol <- as.matrix(df_mpol[,3:2])
mpol< - st_multipolygon(list(
list(mdf_mpol[c(1:4,1),]),
list(mdf_mpol[c(5:8,5),])
))
mpol<- st_multipolygon(list(
list(mdf_mpol[c(1:4,1),]),
list(mdf_mpol[c(5:8,5),])
))
st_geometrycollection(list(punto,mp,ls,mls,pol,mpol))
st_geometrycollection(list(st_zm(punto,'ZM'),,mp,ls,mls,pol,mpol))
st_zm(punto,'ZM')
st_geometrycollection(list(st_zm(punto,'ZM'),mp,ls,mls,pol,mpol))
class(gc)
st_geometry_type(gc)
gc <- st_geometrycollection(list(st_zm(punto,'ZM'),mp,ls,mls,pol,mpol))
class(gc)
st_geometry_type(gc)
plot(gc)
st_sfc(c(punto,mp,ls,mls))
st_sfc(c(st_zm(punto,'ZM'),mp,ls,mls))
st_sfc(st_zm(punto,'ZM'),mp,ls,mls)
geometrs <- st_sfc(st_zm(punto,'ZM'),mp,ls,mls,pol,mpol)
st_sf(geometrs)
?st_sf
geoms_sf$tipo_geom <- c('punto','multipunto','linestring','multilinestring','polygon','multipolygon')
geoms_sf <- st_sf(geometrs)
geoms_sf <- st_sf(geometrs)
geoms_sf$tipo_geom <- c('punto','multipunto','linestring','multilinestring','polygon','multipolygon')
geoms_sf
# forma 1
mdf <-as.matrix(df[,2:1])
st_multipoint(mdf)
df <- data.frame(
latitud = c(-33.70, -33.07, -33.12,-33.67, -33.70, -33.65, -33.67, -33.66, -33.86, -33.21),
longitud = c(-71.37, -70.75, -70.83, -70.58, -70.70, -71.1, -70.92, -70.76, -70.63, -70.71)
)
# forma 1
mdf <-as.matrix(df[,2:1])
st_multipoint(mdf)
st_sfc(mp)
st_as_sf(df,coords = c('longitud','latitud'))
mp <- st_point(mdf)
mp <- apply(mdf,1,'st_point')
mp
mp[,1]
st_sfc(st_point(mdf[1,]))
lapply(1:nrow(df),\(i) st_point(mdf[i,]))
lapply(1:nrow(df),\(i) st_point(mdf[i,])) |> unlist()
lapply(1:nrow(df),\(i) st_point(mdf[i,])) |> rbind()
lapply(1:nrow(df),\(i) st_point(mdf[i,])) |> cbind()
lapply(1:nrow(df),\(i) st_point(mdf[i,])) |> cbind() |> st_sfc()
la <- lapply(1:nrow(mdf), \(i) st_point(mdf[i,]))
st_sfc(la)
# forma 1
mdf <-as.matrix(df[,2:1])
la <- lapply(1:nrow(mdf), \(i) st_point(mdf[i,]))
psfc <- st_sfc(la)
psf <- st_sf(psfc)
psf
#forma 2
psf2 <- st_as_sf(df,coords = c('longitud','latitud'))
psf2
st_crs(psf) <- 32719
psf
fuentes_puntuales <- read_sf('../data/capas/Aire/bdide_OWD_Aire_Emisiones_fuentes_puntuales_contaminante.shp')
#Sistema de Referencia de Coordenadas
st_crs(fuentes_puntuales)
?st_crs
#Sistema de Referencia de Coordenadas
st_crs(fuentes_puntuales,parameters = TRUE)
#Sistema de Referencia de Coordenadas
st_crs(fuentes_puntuales)$epsg
fuentes_puntuales <- read_sf('../data/capas/Aire/bdide_OWD_Aire_Emisiones_fuentes_puntuales_contaminante.shp')
planes_preven <- read_sf('../data/capas/Aire/bdide_OWD_Aire_planes_prevencion_descontaminacion.shp')
zonas_saturadas <- read_sf('../data/capas/Aire/bdide_OWD_Aire_Zonas_Saturadas_Latentes.shp')
area_preser <- read_sf('../data/capas/Biodiversidad/biodi_area_preservacion_ecologica.shp')
area_prohi <- read_sf('../data/capas/Biodiversidad/biodi_area_prohibicion_caza.shp')
vegeta <- read_sf('../data/capas/Biodiversidad/biodi_f_vegetacionales_gajardo.shp')
pisosveg <- read_sf('../data/capas/Biodiversidad/biodi_pisosvegetacionalespliscoff2017.shp')
snaspe <- read_sf('../data/capas/Biodiversidad/biodi_snaspe_2021.shp')
#tipo de geometria
st_geometry_type(fuentes_puntuales)
st_geometry_type(planes_preven)
st_geometry_type(zonas_saturadas)
#cantidad de variables
ncol(fuentes_puntuales) - 1
ncol(planes_preven) - 1
ncol(zonas_saturadas) - 1
#cantidad de observaciones
nrow(fuentes_puntuales)
nrow(planes_preven)
nrow(zonas_saturadas)
#Sistema de Referencia de Coordenadas
st_crs(fuentes_puntuales)$epsg
st_crs(planes_preven)$epsg
st_crs(zonas_saturadas)$epsg
fuentes_puntuales <- read_sf('../data/capas/Aire/bdide_OWD_Aire_Emisiones_fuentes_puntuales_contaminante.shp')
planes_preven <- read_sf('../data/capas/Aire/bdide_OWD_Aire_planes_prevencion_descontaminacion.shp')
zonas_saturadas <- read_sf('../data/capas/Aire/bdide_OWD_Aire_Zonas_Saturadas_Latentes.shp')
area_preser <- read_sf('../data/capas/Biodiversidad/biodi_area_preservacion_ecologica.shp')
area_prohi <- read_sf('../data/capas/Biodiversidad/biodi_area_prohibicion_caza.shp')
vegeta <- read_sf('../data/capas/Biodiversidad/biodi_f_vegetacionales_gajardo.shp')
pisosveg <- read_sf('../data/capas/Biodiversidad/biodi_pisosvegetacionalespliscoff2017.shp')
snaspe <- read_sf('../data/capas/Biodiversidad/biodi_snaspe_2021.shp')
#tipo de geometria
st_geometry_type(fuentes_puntuales)
st_geometry_type(planes_preven)
st_geometry_type(zonas_saturadas)
st_geometry_type(area_preser)
st_geometry_type(area_prohi)
st_geometry_type(vegeta)
st_geometry_type(pisosveg)
st_geometry_type(snaspe)
#cantidad de variables
ncol(fuentes_puntuales) - 1
ncol(planes_preven) - 1
ncol(zonas_saturadas) - 1
#cantidad de observaciones
nrow(fuentes_puntuales)
nrow(planes_preven)
nrow(zonas_saturadas)
#Sistema de Referencia de Coordenadas
st_crs(fuentes_puntuales)$epsg
st_crs(planes_preven)$epsg
st_crs(zonas_saturadas)$epsg
list(fuentes_puntuales,planes_preven)
lista <- list(fuentes_puntuales,planes_preven,zonas_saturadas,area_preser,
area_prohi,vegeta,pisosveg,snaspe)
lapply(lista,st_geometry_type)
#tipo de geometria
sapply(lista, st_geometry_type)
#cantidad de variables
sapply(lista,\(x) ncol(x) - 1)
snaspe |> names()
snaspe$region
snaspe_metro <- subset(snaspe,region == 'Metropolitana')
snaspe_metro[c('categoria','nom_unidad')]
r <- rast(xmin = lon[1],xmax=lon[2],
ymin=lat[1],ymax = lat[2])
lat <- c(-33-30/60, -32-30/60)
lon <- c(-70 - 40/60,-69-40/60)
r <- rast(xmin = lon[1],xmax=lon[2],
ymin=lat[1],ymax = lat[2])
library(terra)
r <- rast(xmin = lon[1],xmax=lon[2],
ymin=lat[1],ymax = lat[2])
r
#- cantidad de filas y columnas
dim(r)
crs(r)
?rast
r <- rast(x=1:50,xmin = lon[1],xmax = lon[2],
ymin = lat[1],ymax = lat[2],
nrow = 10,ncol = 5)
r <- rast(xmin = lon[1],xmax = lon[2],
ymin = lat[1],ymax = lat[2],
nrow = 10,ncol = 5, vals = 1:50)
r
View(x)
View(x)
View(x)
#forma 1
r <- rast(nrow=3,ncol=3)
r3 <- c(r,r,r)
values(r3) <- 1:27
plot(r[[1]])
plot(r[[1]])
text(r[[1]])
plot(r3[[1]])
text(r3[[1]])
sumr3 < sum(r3)
sumr3 < sum(r3)
sumr3 <- sum(r3)
sumr3
array(dim(c(3,3,3)))
array(data=1:27,dim(c(3,3,3)))
array(data=1:27,dims =c(3,3,3))
?array
array(data=1:27,dim =c(3,3,3))
r3_v2 <-rast(a)
a <- array(data=1:27,dim =c(3,3,3))
a <- array(data=1:27,dim =c(3,3,3))
r3_v2 <-rast(a)
identical(r3,r3_v2)
r3
r3_v2
#forma 2
sumr3_v2 <- app(r3,sum)
crs(dem,describe = TRUE)
dem <- rast('../data/capas_raster/dem_chile.tif')
dem <- rast('../data/capas_raster/dem_chile.tif')
prec <- rast('../data/capas_raster/prec_chile.tif')
temp <- rast('../data/capas_raster/temp_chile.tif')
crs(dem,describe = TRUE)
library(sf)
div_comunal <- read_sf('../data/capas/division_comunal')
div_comunal <- read_sf('../data/capas/division_comunal/division_comunal.shp')
library(sf)
div_comunal <- read_sf('../data/capas/division_comunal/division_comunal.shp')
library(sf)
library(sf)
div_comunal <- read_sf('../data/capas/division_comunal/division_comunal.shp')
library(sf)
div_comunal <- read_sf('../data/capas/division_comunal')
div_comunal
subset(div_comunal,NOM_COM %in% c("La Florida", "Queilén", "Molina"))
div_comunal
div_comunal_sub$geometry
div_comunal_sub <- subset(div_comunal,NOM_COM %in% c("La Florida", "Queilén", "Molina"))
div_comunal_sub$geometry
rm <- subset(div_comunal,region == 'Metropolitana')
rm
div_comunal
rm <- subset(div_comunal,NOM_REG == 'Metropolitana')
rm
rm <- subset(div_comunal,NOM_REG == 'Región Metropolitana')
rm <- subset(div_comunal,NOM_REG == 'Región Metropolitana')
rm
div_comunal$NOM_REG |> unique()
rm <- subset(div_comunal,NOM_REG == "Región Metropolitana de Santiago")
rm <- subset(div_comunal,NOM_REG == "Región Metropolitana de Santiago")
rm
centroides <- st_centroid(rm)
centroides$
```
centroides$NOM_PROV
centroides[centroides$NOM_PROV == "Santiago",]
lr <- subset(div_comunal,NOM_REG == "Región de Los Ríos")
lr <- subset(div_comunal,NOM_REG == "Región de Los Ríos")
lr
estaciones <- read_sf('../data/estaciones_chile')
estaciones <- read_sf('../data/capas/estaciones_chile')
estaciones$region
estaciones$region |> unique()
div_comunal$NOM_REG |> unique()
estas_ohg <- st_intersection(estaciones,reg_ogh)
reg_ohg <- subset(div_comunal,NOM_REG == "Región del Libertador Bernardo O'Higgins")
estas_ohg <- st_intersection(estaciones,reg_ogh)
reg_ohg <- subset(div_comunal,NOM_REG == "Región del Libertador Bernardo O'Higgins")
reg_ohg
estas_ohg <- st_intersection(estaciones,reg_ohg)
st_crs(estaciones)
reg_ohg_geo <- st_transform(reg_ogh,st_crs(estaciones))
estas_ohg <- st_intersection(estaciones,reg_ohg_geo)
reg_ohg_geo <- st_transform(reg_ogh,st_crs(estaciones))
reg_ohg_geo <- st_transform(reg_ohg,st_crs(estaciones))
estas_ohg <- st_intersection(estaciones,reg_ohg_geo)
estas_ohg
estas_buffer <- st_buffer(estas_ohg,500)
subset(estas_buffer,institucion == 'INIA')
estas_buffer
estaciones
estas_ohg
estas_ohg |> names()
subset(estas_buffer,institucio == 'INIA')
library(sf)
b = st_sfc(st_point(c(0, 1)), st_point(c(1, 1))) # create 2 points
b
plot(b)
b = st_buffer(b, dist = 1) # convert points to circles
plot(b, border = "grey")
text(x = c(-0.5, 1.5), y = 1, labels = c("x", "y"), cex = 3) # add text
library(spData)
nz
nz |> st_transform(4326) -> nz_geo
?mosaic
install.packages('elevatr')
install.packages('spDataLarge')
install.packages("spDataLarge", repos = "https://geocompr.r-universe.dev")
m <- matrix(c(-72.34546, -36.95977, -71.09619, -37.10961, -71.17460, -36.83576,-71.04972, -36.57955,-72.07605, -36.14480, -72.64453, -36.01513, -72.59119, -36.75405, -72.34546, -36.95977),byrow = TRUE)
poligono <- st_polygon(m)
library(sf)
library(sf)
m <- matrix(c(-72.34546, -36.95977, -71.09619, -37.10961, -71.17460, -36.83576,-71.04972, -36.57955,-72.07605, -36.14480, -72.64453, -36.01513, -72.59119, -36.75405, -72.34546, -36.95977),byrow = TRUE)
poligono <- st_polygon(m)
library(sf)
m <- matrix(c(-72.34546, -36.95977, -71.09619, -37.10961, -71.17460, -36.83576,-71.04972, -36.57955,-72.07605, -36.14480, -72.64453, -36.01513, -72.59119, -36.75405, -72.34546, -36.95977),byrow = TRUE)
poligono <- st_polygon(m)
cent <- st_centroid(poligono)
library(sf)
m <- matrix(c(-72.34546, -36.95977, -71.09619, -37.10961, -71.17460, -36.83576,-71.04972, -36.57955,-72.07605, -36.14480, -72.64453, -36.01513, -72.59119, -36.75405, -72.34546, -36.95977),byrow = TRUE)
poligono <- st_polygon(list(m))
cent <- st_centroid(poligono)
library(sf)
m <- matrix(c(-72.34546, -36.95977, -71.09619, -37.10961, -71.17460, -36.83576,-71.04972, -36.57955,-72.07605, -36.14480, -72.64453, -36.01513, -72.59119, -36.75405, -72.34546, -36.95977),byrow = TRUE,ncol = 2)
poligono <- st_polygon(list(m))
cent <- st_centroid(poligono)
cent
st_sfc(cent)
cent <- st_centroid(poligono)
cent_sfc <- st_sfc(cent,crs = 4326)
cet_sfc_32719 <- st_transform(cent_sfc,32719)
buf_30km <- st_buffer(cens_sfc_32719)
# calcula el centroide y lo guarda en el objeto cent
cent <- st_centroid(poligono)
# transforma el objeto sfg en sfc y le asigna el SRC en coordenadas geográficas datum WGS84
cent_sfc <- st_sfc(cent,crs = 4326)
# transforma el SRC de coordenadas geográficas a UTM
cet_sfc_32719 <- st_transform(cent_sfc,32719)
#clacula el buffer de 30km
buf_30km <- st_buffer(cent_sfc_32719,dist = 30000)
# calcula el centroide y lo guarda en el objeto cent
cent <- st_centroid(poligono)
# transforma el objeto sfg en sfc y le asigna el SRC en coordenadas geográficas datum WGS84
cent_sfc <- st_sfc(cent,crs = 4326)
# transforma el SRC de coordenadas geográficas a UTM
cent_sfc_32719 <- st_transform(cent_sfc,32719)
#clacula el buffer de 30km
buf_30km <- st_buffer(cent_sfc_32719,dist = 30000)
buff_3km_tras <- buff_30km + c(40000,10000)
library(sf)
m <- matrix(c(-72.34546, -36.95977, -71.09619, -37.10961, -71.17460, -36.83576,-71.04972, -36.57955,-72.07605, -36.14480, -72.64453, -36.01513, -72.59119, -36.75405, -72.34546, -36.95977),byrow = TRUE,ncol = 2)
poligono <- st_polygon(list(m))
# calcula el centroide y lo guarda en el objeto cent
cent <- st_centroid(poligono)
# transforma el objeto sfg en sfc y le asigna el SRC en coordenadas geográficas datum WGS84
cent_sfc <- st_sfc(cent,crs = 4326)
# transforma el SRC de coordenadas geográficas a UTM
cent_sfc_32719 <- st_transform(cent_sfc,32719)
#clacula el buffer de 30km
buf_30km <- st_buffer(cent_sfc_32719,dist = 30000)
buff_3km_tras
buff_3km_tras <- buff_30km + c(40000,10000)
buff_3km_tras <- buf_30km + c(40000,10000)
st_crs(poligono)
st_crs(poligono) <- 4326
poligono_sfc <- st_sfc(poligono,crs = 4326)
poligono_sfc <- st_sfc(poligono,crs = 4326)
poligono_32719 <- st_transform(poligono_sfc,32719)
buf_3km_tras <- buf_30km + c(40000,10000)
buf_3km_tras <- buf_30km + c(40000,10000)
plot(buf_30km)
plot(buf_3km_tras,add = TRUE)
poligono_sfc <- st_sfc(poligono,crs = 4326)
poligono_32719 <- st_transform(poligono_sfc,32719)
buf_3km_tras <- buf_30km + c(40000,10000)
plot(poligono_32719)
plot(buf_3km_tras,add = TRUE)
library(sf)
m <- matrix(c(-72.34546, -36.95977, -71.09619, -37.10961, -71.17460, -36.83576,-71.04972, -36.57955,-72.07605, -36.14480, -72.64453, -36.01513, -72.59119, -36.75405, -72.34546, -36.95977),byrow = TRUE,ncol = 2)
poligono <- st_polygon(list(m))
# calcula el centroide y lo guarda en el objeto cent
cent <- st_centroid(poligono)
# transforma el objeto sfg en sfc y le asigna el SRC en coordenadas geográficas datum WGS84
cent_sfc <- st_sfc(cent,crs = 4326)
# transforma el SRC de coordenadas geográficas a UTM
cent_sfc_32719 <- st_transform(cent_sfc,32719)
#clacula el buffer de 30km
buf_30km <- st_buffer(cent_sfc_32719,dist = 30000)
poligono_sfc <- st_sfc(poligono,crs = 4326)
poligono_32719 <- st_transform(poligono_sfc,32719)
buf_30km_tras <- buf_30km + c(40000,10000)
plot(poligono_32719)
plot(buf_30km_tras,add = TRUE)
poligono_32719
buf_30km_tras
buf_30km
buf_30km_tras <- buf_30km + c(40000,10000)
buf_30km_tras
buf_30km
buf_30km + c(40000,10000)
st_crs(buf_30km_tras) <- 32719
st_crs(buf_30km_tras) <- 32719
par(mfrow = c(1,3))
pol_dif <- st_difference(poligono_32719,buf_30km_tras)
pol_int <- st_intersection(poligono_32719,buf_30km_tras)
cent
cent[1]
dem_corte <- crop(dem,poligono)
library(terra)
dem_corte <- crop(dem,poligono)
dem_mascara <- mask(dem_corte,poligono)
library(sf)
m <- matrix(c(-72.34546, -36.95977, -71.09619, -37.10961, -71.17460, -36.83576,-71.04972, -36.57955,-72.07605, -36.14480, -72.64453, -36.01513, -72.59119, -36.75405, -72.34546, -36.95977),byrow = TRUE,ncol = 2)
poligono <- st_polygon(list(m))
# calcula el centroide y lo guarda en el objeto cent
cent <- st_centroid(poligono)
# transforma el objeto sfg en sfc y le asigna el SRC en coordenadas geográficas datum WGS84
cent_sfc <- st_sfc(cent,crs = 4326)
# transforma el SRC de coordenadas geográficas a UTM
cent_sfc_32719 <- st_transform(cent_sfc,32719)
#clacula el buffer de 30km
buf_30km <- st_buffer(cent_sfc_32719,dist = 30000)
poligono_sfc <- st_sfc(poligono,crs = 4326)
poligono_32719 <- st_transform(poligono_sfc,32719)
buf_30km_tras <- buf_30km + c(40000,10000)
plot(poligono_32719)
plot(buf_30km_tras,add = TRUE)
st_crs(buf_30km_tras) <- 32719
par(mfrow = c(1,3))
dif <- st_difference(poligono_32719,buf_30km_tras)
int <- st_intersection(poligono_32719,buf_30km_tras)
uni <- st_union(poligono_32719,buf_30km_tras)
plot(dif)
plot(int)
plot(uni)
# install.packages('geodata')
library(geodata)
dem <- elevation_3s(lon = cent[1],lat=cent[2],path = tempdir())
plot(dem)
plot(poligono,add = TRUE,col='darkgreen')
dem_corte <- crop(dem,poligono)
dem_mascara <- mask(dem_corte,poligono)
dem_mascara <- mask(dem_corte,vect(poligono))
dem
poligono
dem_corte <- crop(dem,poligono_sfc)
dem_mascara <- mask(dem_corte,poligono_sfc)
dem_mascara <- mask(dem_corte,vect(poligono_sfc))
dif
dem_dif <- crop(dem,dif_4326)
# transformar geometrias a crs=43265
dif_4326 <- st_transform(dif,4326)
int_4326 <- st_transform(int,4326)
int_4326 <- st_transform(int,4326)
uni_4326 <- st_transform(uni,4326)
dem_dif <- crop(dem,dif_4326)
dem_dif <- crop(dem,dif_4326)
dem_mascara <- mask(dem_dif,vect(dif_4326))
asp <- terrain(dem_int,v = 'aspect',unit = 'radians')
library(sf)
m <- matrix(c(-72.34546, -36.95977, -71.09619, -37.10961, -71.17460, -36.83576,-71.04972, -36.57955,-72.07605, -36.14480, -72.64453, -36.01513, -72.59119, -36.75405, -72.34546, -36.95977),byrow = TRUE,ncol = 2)
poligono <- st_polygon(list(m))
# calcula el centroide y lo guarda en el objeto cent
cent <- st_centroid(poligono)
# transforma el objeto sfg en sfc y le asigna el SRC en coordenadas geográficas datum WGS84
cent_sfc <- st_sfc(cent,crs = 4326)
# transforma el SRC de coordenadas geográficas a UTM
cent_sfc_32719 <- st_transform(cent_sfc,32719)
#clacula el buffer de 30km
buf_30km <- st_buffer(cent_sfc_32719,dist = 30000)
poligono_sfc <- st_sfc(poligono,crs = 4326)
poligono_32719 <- st_transform(poligono_sfc,32719)
buf_30km_tras <- buf_30km + c(40000,10000)
plot(poligono_32719)
plot(buf_30km_tras,add = TRUE)
st_crs(buf_30km_tras) <- 32719
par(mfrow = c(1,3))
dif <- st_difference(poligono_32719,buf_30km_tras)
int <- st_intersection(poligono_32719,buf_30km_tras)
uni <- st_union(poligono_32719,buf_30km_tras)
plot(dif)
plot(int)
plot(uni)
# install.packages('geodata')
library(geodata)
dem <- elevation_3s(lon = cent[1],lat=cent[2],path = tempdir())
plot(dem)
plot(poligono,add = TRUE,col='darkgreen')
library(terra)
# transformar geometrias a crs=43265
dif_4326 <- st_transform(dif,4326)
int_4326 <- st_transform(int,4326)
uni_4326 <- st_transform(uni,4326)
dem_dif <- crop(dem,dif_4326)
dem_dif <- mask(dem_dif,vect(dif_4326))
dem_int <- crop(dem,int_4326)
dem_int <- mask(dem_int,vect(int_4326))
dem_uni <- crop(dem,uni_4326)
dem_uni <- mask(dem_uni,vect(uni_4326))
par(mfrow = c(1,3))
plot(dem_dif)
plot(dem_int)
plot(dem_uni)
library(tmap)
download.file('https://drive.google.com/file/d/1jRvnkqqadVZpXC3w-ghDxGvp9U1KpYby/view?usp=sharing',dest = 'temp_tif')
getwd()
?download.file
download.file('https://drive.google.com/file/d/1jRvnkqqadVZpXC3w-ghDxGvp9U1KpYby/view?usp=sharing',destfile = 'temp_tif')
library(tmap)
temp
temp <- rast('temp_chile.tif')
# calcular el promedio de temperatura anual para cada pixel de la geometria (4c)
temp_promedio <- mean(temp,na.rm = TRUE)
# calcular el máximo de la temperatura anual para cada pixel de la geometria (4c)
temp_maxima <- max(temp,na.rm = TRUE)
par(mfrow = c(1,2))
plot(temp_promedio,main = 'Temperatura promedio anual')
plot(temp_maxima,main = 'Temperatura maxima anual')
# calcular el promedio de temperatura anual en la geometria (4c) para cada uno de los meses.
temp_anual <- global(temp,'mean',na.rm = TRUE)
temp_anual
temp
months
temp <- rast('temp_chile.tif')
temp_corte <- crop(temp,uni_4326)
temp_mascara <- mask(temp_corte,vect(uni_4326))
# calcular el promedio de temperatura anual para cada pixel de la geometria (4c)
temp_promedio <- mean(temp_mascara,na.rm = TRUE)
# calcular el máximo de la temperatura anual para cada pixel de la geometria (4c)
temp_maxima <- max(temp_mascara,na.rm = TRUE)
par(mfrow = c(1,2))
plot(temp_promedio,main = 'Temperatura promedio anual')
plot(temp_maxima,main = 'Temperatura maxima anual')
# calcular el promedio de temperatura anual en la geometria (4c) para cada uno de los meses.
temp_anual <- global(temp_mascara,'mean',na.rm = TRUE)
temp_anual
plot(month.name,temp_anual$mean)
plot(month.name,temp_anual$mean)
plot(1:12,temp_anual$mean)
buf_30km
