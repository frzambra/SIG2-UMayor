tm_shape(est_metro) +
tm_dots() +
tm_compass() +
tm_graticules()
library(geodata)
citation('geodata')
library(agrometR)
citation('agrometR')
library(tidyverse)
estaciones_agromet
data <- get_agro_data(stations_id = '41',
date_start = "2024-08-01",
date_end = "2024-08-12")
data
data |>
ggplot(aes(fecha_hora,temp_promedio_aire)) +
geom_point() +
geom_line() +
ggtitle('Estación Til-Til',
subtitle = 'Temperatura promedio del aire')
data <- get_agro_data(stations_id = '41',
date_start = "2024-07-01",
date_end = "2024-08-12")
data |>
ggplot(aes(fecha_hora,temp_promedio_aire)) +
geom_point() +
geom_line() +
ggtitle('Estación Til-Til',
subtitle = 'Temperatura promedio del aire')
lapply(ids[1:10],\(id){
data <- get_agro_data(stations_id = id,date_start = "2024-08-01",date_end = "2024-08-12")
nombre_estacion <- estaciones_agromet |>
filter(ema == id) |>
pull(nombre_ema)
data |>
ggplot(aes(fecha_hora,radiacion_solar_max)) +
geom_point() +
geom_line() +
ggtitle(paste0('Estación ', nombre_estacion),
subtitle = 'Temperatura promedio del aire')
})
ids <- estaciones_agromet |>
distinct(ema) |>
pull(ema)
lapply(ids[1:10],\(id){
data <- get_agro_data(stations_id = id,date_start = "2024-08-01",date_end = "2024-08-12")
nombre_estacion <- estaciones_agromet |>
filter(ema == id) |>
pull(nombre_ema)
data |>
ggplot(aes(fecha_hora,radiacion_solar_max)) +
geom_point() +
geom_line() +
ggtitle(paste0('Estación ', nombre_estacion),
subtitle = 'Temperatura promedio del aire')
})
estaciones_agromet
# Trabajar con datos vectoriales
estaciones <- estaciones_agromet
View(estaciones)
plot(estaciones$longitud,estaciones$latitud)
est_sf <- estaciones |>
st_as_sf(coords = c('longitud','latitud'),crs = 4326)
library(sf) # para trabajar con datos vectoriales
library(terra) # para trabajar con datos raster
library(tmap) #para realizar mapas temáticos
library(geodata)
library(agrometR)
library(tidyverse)
est_sf <- estaciones |>
st_as_sf(coords = c('longitud','latitud'),crs = 4326)
plot(est_sf$geometry)
est_sf
# Descargar datos climatológicos para Chile, Tmin y Tmax
tmin <- geodata::worldclim_country('chile','tmin',path = tempdir())
tmin
plot(Tmin)
plot(Ttin)
plot(Ttmin)
plot(tmin)
# Descargar unidades administrativas
chl <- geodata::gadm('chl',path = tempdir()) |>
st_as_sf()
plot(chl |> st_geometry())
chl |> distinct(NAME_1)
# Seleccionar región Metropolitana
chl[2,] |> st_geometry() |> plot()
ara <- chl[2,]
tmax_ara <- crop(tmax,ara)
tmin_ara <- crop(tmin,ara)
tmin_ara <- crop(tmin,ara)
tmin_ara <- mask(tmin_ara,ara)
plot(tmin_ara)
month
months
month
names(tmin_ara) <- month.name
plot(tmin_area)
plot(tmin_ara)
plot(mean(tmin_ara))
est_ara
library(tmap)
tmean <- mean(tmin_ara)
library(tmap)
tm_shape(tmean) +
tm_raster(style = 'cont')
tmap_mode('view')
tm_shape(tmean) +
tm_raster(style = 'cont')
tm_shape(tmean) +
tm_raster(style = 'cont')  +
tm_shape(ara) +
tm_borders(lwd =2)
tm_shape(tmean) +
tm_raster(style = 'cont')  +
tm_shape(ara) +
tm_borders(lwd =2) +
tm_shape(est_ara)
tm_shape(tmean) +
tm_raster(style = 'cont')  +
tm_shape(ara) +
tm_borders(lwd =2)
tmap_mode('plot')
tm_shape(tmean) +
tm_raster(style = 'cont')  +
tm_shape(ara) +
tm_borders(lwd =2)
tm_shape(tmean) +
tm_raster(style = 'cont')  +
tm_shape(ara) +
tm_borders(lwd =2) +
tm_shape(est_sf) +
tm_dots() +
tm_compass() +
tm_graticules()
tm_shape(tmean) +
tm_raster(style = 'cont')  +
tm_shape(ara) +
tm_borders(lwd =2) +
tm_shape(est_sf) +
tm_dots() +
tm_compass() +
tm_graticules() +
tm_layout(legend.outside = TRUE)
map <- tm_shape(tmean) +
tm_raster(style = 'cont')  +
tm_shape(ara) +
tm_borders(lwd =2) +
tm_shape(est_sf) +
tm_dots() +
tm_compass() +
tm_graticules() +
tm_layout(legend.outside = TRUE)
tmap_save(map,'mapaejeomlo.png')
?matrix
warpbreaks
warpbreaks |> class()
m1 <- matrix(sample(1:100,12),4,3)
m2 <- matrix(sample(1:100,20),4,5)
cbind(m1,m2)
v <- runif(40,0,100)
rbind(c(11,12,13,14,15),
c(21,22,23,24,25),
c(31,32,33,34,35),
c(41,42,43,44,45),
c(51,52,53,54,55))
?st_polygon
library(sf)
?st_polygon
st_polygon(list(mdf_pol[c(1:4,1),]))
df_pol <- data.frame(
latitud = c(-33.38943,-33.38911,-33.38959,-33.38991),
longitud = c(-70.63566,-70.63531,-70.63468,-70.63500)
)
mdf_pol <- as.matrix(df_pol)
st_polygon(list(mdf_pol[c(1:4,1),]))
df_mpol <- data.frame(
poligono = c(rep('poligono_1',4),rep('poligono_2',4)),
latitud = c(-33.38943,-33.38911,-33.38959,-33.38991,
-33.38883,-33.38846,-33.38893,-33.38929),
longitud = c(-70.63566,-70.63531,-70.63468,-70.63500,
-70.63500,-70.63461,-70.63396,-70.63435)
)
mdf_mpol <- as.matrix(df_mpol[,3:2])
mdf_mpol <- as.matrix(df_mpol[,3:2])
mdf_mpol
st_multipolygon(list(mdf_mpol[c(1:4,1),],mdf_mpol[c(5:8,5),]))
mdf_mpol[c(1:4,1),]
mdf_mpol[c(5:8,5),]
st_multipolygon(list(mdf_mpol[c(1:4,1),],mdf_mpol[c(5:8,5),]))
st_multipolygon(list(
list(mdf_mpol[c(1:4,1),]),
list(mdf_mpol[c(5:8,5),])
))
st_geometrycollection(list(punto,mp,ls,mls,pol,mpol))
punto <- st_point(c(-72.65,-36.25,200,90))
str(punto)
df <- data.frame(
latitud = c(-33.38991,-33.38959,-33.38929,-33.38893),
longitud = c(-70.63500,-70.63468,-70.63435,-70.63396)
)
library(sf)
mp <-  st_multipoint(as.matrix(df[,2:1]))
class(mp)
ls <- st_linestring(as.matrix(df[,2:1]))
par(mfrow = c(1,2))
plot(mp)
plot(ls)
df <- data.frame(
linea = c(rep('linea_1',4),rep('linea_2',4)),
latitud = c(-33.38991,-33.38959,-33.38929,-33.38893,
-33.38943,-33.38911,-33.38883,-33.38846),
longitud = c(-70.63500,-70.63468,-70.63435,-70.63396,
-70.63566,-70.63531,-70.63500,-70.63461)
)
mdf <- as.matrix(df[,3:2])
mls <- st_multilinestring(list(mdf[1:4,],mdf[5:8,]))
class(mls)
st_geometry_type(mls)
plot(mls)
df_pol <- data.frame(
latitud = c(-33.38943,-33.38911,-33.38959,-33.38991),
longitud = c(-70.63566,-70.63531,-70.63468,-70.63500)
)
mdf_pol <- as.matrix(df_pol)
pol <- st_polygon(list(mdf_pol[c(1:4,1),]))
class(pol)
st_geometry_type(pol)
plot(pol)
df_mpol <- data.frame(
poligono = c(rep('poligono_1',4),rep('poligono_2',4)),
latitud = c(-33.38943,-33.38911,-33.38959,-33.38991,
-33.38883,-33.38846,-33.38893,-33.38929),
longitud = c(-70.63566,-70.63531,-70.63468,-70.63500,
-70.63500,-70.63461,-70.63396,-70.63435)
)
mdf_mpol <- as.matrix(df_mpol[,3:2])
mpol< - st_multipolygon(list(
list(mdf_mpol[c(1:4,1),]),
list(mdf_mpol[c(5:8,5),])
))
st_geometrycollection(list(punto,mp,ls,mls,pol,mpol))
mdf_mpol <- as.matrix(df_mpol[,3:2])
mpol< - st_multipolygon(list(
list(mdf_mpol[c(1:4,1),]),
list(mdf_mpol[c(5:8,5),])
))
mpol<- st_multipolygon(list(
list(mdf_mpol[c(1:4,1),]),
list(mdf_mpol[c(5:8,5),])
))
st_geometrycollection(list(punto,mp,ls,mls,pol,mpol))
st_geometrycollection(list(st_zm(punto,'ZM'),,mp,ls,mls,pol,mpol))
st_zm(punto,'ZM')
st_geometrycollection(list(st_zm(punto,'ZM'),mp,ls,mls,pol,mpol))
class(gc)
st_geometry_type(gc)
gc <- st_geometrycollection(list(st_zm(punto,'ZM'),mp,ls,mls,pol,mpol))
class(gc)
st_geometry_type(gc)
plot(gc)
st_sfc(c(punto,mp,ls,mls))
st_sfc(c(st_zm(punto,'ZM'),mp,ls,mls))
st_sfc(st_zm(punto,'ZM'),mp,ls,mls)
geometrs <- st_sfc(st_zm(punto,'ZM'),mp,ls,mls,pol,mpol)
st_sf(geometrs)
?st_sf
geoms_sf$tipo_geom <- c('punto','multipunto','linestring','multilinestring','polygon','multipolygon')
geoms_sf <- st_sf(geometrs)
geoms_sf <- st_sf(geometrs)
geoms_sf$tipo_geom <- c('punto','multipunto','linestring','multilinestring','polygon','multipolygon')
geoms_sf
# forma 1
mdf <-as.matrix(df[,2:1])
st_multipoint(mdf)
df <- data.frame(
latitud = c(-33.70, -33.07, -33.12,-33.67, -33.70, -33.65, -33.67, -33.66, -33.86, -33.21),
longitud = c(-71.37, -70.75, -70.83, -70.58, -70.70, -71.1, -70.92, -70.76, -70.63, -70.71)
)
# forma 1
mdf <-as.matrix(df[,2:1])
st_multipoint(mdf)
st_sfc(mp)
st_as_sf(df,coords = c('longitud','latitud'))
mp <- st_point(mdf)
mp <- apply(mdf,1,'st_point')
mp
mp[,1]
st_sfc(st_point(mdf[1,]))
lapply(1:nrow(df),\(i) st_point(mdf[i,]))
lapply(1:nrow(df),\(i) st_point(mdf[i,])) |> unlist()
lapply(1:nrow(df),\(i) st_point(mdf[i,])) |> rbind()
lapply(1:nrow(df),\(i) st_point(mdf[i,])) |> cbind()
lapply(1:nrow(df),\(i) st_point(mdf[i,])) |> cbind() |> st_sfc()
la <- lapply(1:nrow(mdf), \(i) st_point(mdf[i,]))
st_sfc(la)
# forma 1
mdf <-as.matrix(df[,2:1])
la <- lapply(1:nrow(mdf), \(i) st_point(mdf[i,]))
psfc <- st_sfc(la)
psf <- st_sf(psfc)
psf
#forma 2
psf2 <- st_as_sf(df,coords = c('longitud','latitud'))
psf2
st_crs(psf) <- 32719
psf
fuentes_puntuales <- read_sf('../data/capas/Aire/bdide_OWD_Aire_Emisiones_fuentes_puntuales_contaminante.shp')
#Sistema de Referencia de Coordenadas
st_crs(fuentes_puntuales)
?st_crs
#Sistema de Referencia de Coordenadas
st_crs(fuentes_puntuales,parameters = TRUE)
#Sistema de Referencia de Coordenadas
st_crs(fuentes_puntuales)$epsg
fuentes_puntuales <- read_sf('../data/capas/Aire/bdide_OWD_Aire_Emisiones_fuentes_puntuales_contaminante.shp')
planes_preven <- read_sf('../data/capas/Aire/bdide_OWD_Aire_planes_prevencion_descontaminacion.shp')
zonas_saturadas <- read_sf('../data/capas/Aire/bdide_OWD_Aire_Zonas_Saturadas_Latentes.shp')
area_preser <- read_sf('../data/capas/Biodiversidad/biodi_area_preservacion_ecologica.shp')
area_prohi <- read_sf('../data/capas/Biodiversidad/biodi_area_prohibicion_caza.shp')
vegeta <- read_sf('../data/capas/Biodiversidad/biodi_f_vegetacionales_gajardo.shp')
pisosveg <- read_sf('../data/capas/Biodiversidad/biodi_pisosvegetacionalespliscoff2017.shp')
snaspe <- read_sf('../data/capas/Biodiversidad/biodi_snaspe_2021.shp')
#tipo de geometria
st_geometry_type(fuentes_puntuales)
st_geometry_type(planes_preven)
st_geometry_type(zonas_saturadas)
#cantidad de variables
ncol(fuentes_puntuales) - 1
ncol(planes_preven) - 1
ncol(zonas_saturadas) - 1
#cantidad de observaciones
nrow(fuentes_puntuales)
nrow(planes_preven)
nrow(zonas_saturadas)
#Sistema de Referencia de Coordenadas
st_crs(fuentes_puntuales)$epsg
st_crs(planes_preven)$epsg
st_crs(zonas_saturadas)$epsg
fuentes_puntuales <- read_sf('../data/capas/Aire/bdide_OWD_Aire_Emisiones_fuentes_puntuales_contaminante.shp')
planes_preven <- read_sf('../data/capas/Aire/bdide_OWD_Aire_planes_prevencion_descontaminacion.shp')
zonas_saturadas <- read_sf('../data/capas/Aire/bdide_OWD_Aire_Zonas_Saturadas_Latentes.shp')
area_preser <- read_sf('../data/capas/Biodiversidad/biodi_area_preservacion_ecologica.shp')
area_prohi <- read_sf('../data/capas/Biodiversidad/biodi_area_prohibicion_caza.shp')
vegeta <- read_sf('../data/capas/Biodiversidad/biodi_f_vegetacionales_gajardo.shp')
pisosveg <- read_sf('../data/capas/Biodiversidad/biodi_pisosvegetacionalespliscoff2017.shp')
snaspe <- read_sf('../data/capas/Biodiversidad/biodi_snaspe_2021.shp')
#tipo de geometria
st_geometry_type(fuentes_puntuales)
st_geometry_type(planes_preven)
st_geometry_type(zonas_saturadas)
st_geometry_type(area_preser)
st_geometry_type(area_prohi)
st_geometry_type(vegeta)
st_geometry_type(pisosveg)
st_geometry_type(snaspe)
#cantidad de variables
ncol(fuentes_puntuales) - 1
ncol(planes_preven) - 1
ncol(zonas_saturadas) - 1
#cantidad de observaciones
nrow(fuentes_puntuales)
nrow(planes_preven)
nrow(zonas_saturadas)
#Sistema de Referencia de Coordenadas
st_crs(fuentes_puntuales)$epsg
st_crs(planes_preven)$epsg
st_crs(zonas_saturadas)$epsg
list(fuentes_puntuales,planes_preven)
lista <- list(fuentes_puntuales,planes_preven,zonas_saturadas,area_preser,
area_prohi,vegeta,pisosveg,snaspe)
lapply(lista,st_geometry_type)
#tipo de geometria
sapply(lista, st_geometry_type)
#cantidad de variables
sapply(lista,\(x) ncol(x) - 1)
snaspe |> names()
snaspe$region
snaspe_metro <- subset(snaspe,region == 'Metropolitana')
snaspe_metro[c('categoria','nom_unidad')]
r <- rast(xmin = lon[1],xmax=lon[2],
ymin=lat[1],ymax = lat[2])
lat <- c(-33-30/60, -32-30/60)
lon <- c(-70 - 40/60,-69-40/60)
r <- rast(xmin = lon[1],xmax=lon[2],
ymin=lat[1],ymax = lat[2])
library(terra)
r <- rast(xmin = lon[1],xmax=lon[2],
ymin=lat[1],ymax = lat[2])
r
#- cantidad de filas y columnas
dim(r)
crs(r)
?rast
r <- rast(x=1:50,xmin = lon[1],xmax = lon[2],
ymin = lat[1],ymax = lat[2],
nrow = 10,ncol = 5)
r <- rast(xmin = lon[1],xmax = lon[2],
ymin = lat[1],ymax = lat[2],
nrow = 10,ncol = 5, vals = 1:50)
r
View(x)
View(x)
View(x)
#forma 1
r <- rast(nrow=3,ncol=3)
r3 <- c(r,r,r)
values(r3) <- 1:27
plot(r[[1]])
plot(r[[1]])
text(r[[1]])
plot(r3[[1]])
text(r3[[1]])
sumr3 < sum(r3)
sumr3 < sum(r3)
sumr3 <- sum(r3)
sumr3
array(dim(c(3,3,3)))
array(data=1:27,dim(c(3,3,3)))
array(data=1:27,dims =c(3,3,3))
?array
array(data=1:27,dim =c(3,3,3))
r3_v2 <-rast(a)
a <- array(data=1:27,dim =c(3,3,3))
a <- array(data=1:27,dim =c(3,3,3))
r3_v2 <-rast(a)
identical(r3,r3_v2)
r3
r3_v2
#forma 2
sumr3_v2 <- app(r3,sum)
crs(dem,describe = TRUE)
dem <- rast('../data/capas_raster/dem_chile.tif')
dem <- rast('../data/capas_raster/dem_chile.tif')
prec <- rast('../data/capas_raster/prec_chile.tif')
temp <- rast('../data/capas_raster/temp_chile.tif')
crs(dem,describe = TRUE)
library(sf)
div_comunal <- read_sf('../data/capas/division_comunal')
div_comunal <- read_sf('../data/capas/division_comunal/division_comunal.shp')
library(sf)
div_comunal <- read_sf('../data/capas/division_comunal/division_comunal.shp')
library(sf)
library(sf)
div_comunal <- read_sf('../data/capas/division_comunal/division_comunal.shp')
library(sf)
div_comunal <- read_sf('../data/capas/division_comunal')
div_comunal
subset(div_comunal,NOM_COM %in% c("La Florida", "Queilén", "Molina"))
div_comunal
div_comunal_sub$geometry
div_comunal_sub <- subset(div_comunal,NOM_COM %in% c("La Florida", "Queilén", "Molina"))
div_comunal_sub$geometry
rm <- subset(div_comunal,region == 'Metropolitana')
rm
div_comunal
rm <- subset(div_comunal,NOM_REG == 'Metropolitana')
rm
rm <- subset(div_comunal,NOM_REG == 'Región Metropolitana')
rm <- subset(div_comunal,NOM_REG == 'Región Metropolitana')
rm
div_comunal$NOM_REG |> unique()
rm <- subset(div_comunal,NOM_REG == "Región Metropolitana de Santiago")
rm <- subset(div_comunal,NOM_REG == "Región Metropolitana de Santiago")
rm
centroides <- st_centroid(rm)
centroides$
```
centroides$NOM_PROV
centroides[centroides$NOM_PROV == "Santiago",]
lr <- subset(div_comunal,NOM_REG == "Región de Los Ríos")
lr <- subset(div_comunal,NOM_REG == "Región de Los Ríos")
lr
estaciones <- read_sf('../data/estaciones_chile')
estaciones <- read_sf('../data/capas/estaciones_chile')
estaciones$region
estaciones$region |> unique()
div_comunal$NOM_REG |> unique()
estas_ohg <- st_intersection(estaciones,reg_ogh)
reg_ohg <- subset(div_comunal,NOM_REG == "Región del Libertador Bernardo O'Higgins")
estas_ohg <- st_intersection(estaciones,reg_ogh)
reg_ohg <- subset(div_comunal,NOM_REG == "Región del Libertador Bernardo O'Higgins")
reg_ohg
estas_ohg <- st_intersection(estaciones,reg_ohg)
st_crs(estaciones)
reg_ohg_geo <- st_transform(reg_ogh,st_crs(estaciones))
estas_ohg <- st_intersection(estaciones,reg_ohg_geo)
reg_ohg_geo <- st_transform(reg_ogh,st_crs(estaciones))
reg_ohg_geo <- st_transform(reg_ohg,st_crs(estaciones))
estas_ohg <- st_intersection(estaciones,reg_ohg_geo)
estas_ohg
estas_buffer <- st_buffer(estas_ohg,500)
subset(estas_buffer,institucion == 'INIA')
estas_buffer
estaciones
estas_ohg
estas_ohg |> names()
subset(estas_buffer,institucio == 'INIA')
library(sf)
b = st_sfc(st_point(c(0, 1)), st_point(c(1, 1))) # create 2 points
b
plot(b)
b = st_buffer(b, dist = 1) # convert points to circles
plot(b, border = "grey")
text(x = c(-0.5, 1.5), y = 1, labels = c("x", "y"), cex = 3) # add text
library(spData)
nz
nz |> st_transform(4326) -> nz_geo
?mosaic
install.packages('elevatr')
install.packages('spDataLarge')
install.packages("spDataLarge", repos = "https://geocompr.r-universe.dev")
