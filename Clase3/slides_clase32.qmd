---
title: "Datos Espaciales en R"
author: "Dr. Francisco Zambrano"
format: 
  revealjs:
    slide-number: true
    #title-slide-attributes: 
      #data-background-image: "https://media.giphy.com/media/GldXiKXeO7hpczEHxt/giphy.gif"
      #data-background-size: "contain"
    title-block-banner: true
    logo: "logo_hemera.jpg"
    footer: "IMSE1017|2-2022"
    theme: default
    echo: true
---

## Contenidos 

::: {.incremental}

::: columns

::: {.column width="50%"}
- Datos Espaciales en ![](https://www.r-project.org/Rlogo.png){width="50px"}

    - Datos vectoriales

    - Datos raster

- Cargar y guardar datos espaciales
  
    - Vectoriales
    
    - Rasters
  
:::

::: {.column width="50%" .fragment}
![](../img/rastervector.png){width="500px"}

:::
:::

:::

# 1.  Datos espaciales en ![](https://www.r-project.org/Rlogo.png){width="50px"} {background-color='brown'}

## Tipos de dato espaciales {.smaller}

::: columns

::: {.column width="50%"}
- `Discretos` : datos vectoriales
- `Continuos` : datos raster
:::

::: {.column width="50%"}
![](../img/rastervector.png){width="250px"}
:::
:::

**Simple representación de datos espaciales**

```{r}
name <- LETTERS[1:10]
longitude <- c(-116.7, -120.4, -116.7, -113.5, -115.5,
               -120.8, -119.5, -113.7, -113.7, -110.7)
latitude <- c(45.3, 42.6, 38.9, 42.1, 35.7, 38.9,
              36.2, 39, 41.6, 36.9)
stations <- cbind(longitude, latitude)
# datos simulados de precipitación
set.seed(0)
precip <- round((runif(length(latitude))*10)^3)
```


## Simple representación de datos espaciales {.smaller}

```{r eval=FALSE}
psize <- 1 + precip/500
plot(stations, cex=psize, pch=20, col='red', main='Precipitation')
# add names to plot
text(stations, name, pos=4)
# add a legend
breaks <- c(100, 250, 500, 1000)
legend.psize <- 1+breaks/500
legend("topright", legend=breaks, pch=20, pt.cex=legend.psize, col='red', bg='gray')
```

## Simple representación de datos espaciales {.smaller}

```{r echo=FALSE,eval=TRUE,fig.height=6}
psize <- 1 + precip/500
plot(stations, cex=psize, pch=20, col='red', main='Precipitation')
# add names to plot
text(stations, name, pos=4)
# add a legend
breaks <- c(100, 250, 500, 1000)
legend.psize <- 1+breaks/500
legend("topright", legend=breaks, pch=20, pt.cex=legend.psize, col='red', bg='gray')
```

## Simple representación de datos espaciales {.smaller}

```{r eval=FALSE}
lon <- c(-116.8, -114.2, -112.9, -111.9, -114.2, -115.4, -117.7)
lat <- c(41.3, 42.9, 42.4, 39.8, 37.6, 38.3, 37.6)
x <- cbind(lon, lat)
plot(stations, main='Precipitation')
polygon(x, col='blue', border='light blue')
lines(stations, lwd=3, col='red')
points(x, cex=2, pch=20)
points(stations, cex=psize, pch=20, col='red', main='Precipitation')
```

## Simple representación de datos espaciales {.smaller}

```{r echo=FALSE,fig.height=6}
lon <- c(-116.8, -114.2, -112.9, -111.9, -114.2, -115.4, -117.7)
lat <- c(41.3, 42.9, 42.4, 39.8, 37.6, 38.3, 37.6)
x <- cbind(lon, lat)
plot(stations, main='Precipitation')
polygon(x, col='blue', border='light blue')
lines(stations, lwd=3, col='red')
points(x, cex=2, pch=20)
points(stations, cex=psize, pch=20, col='red', main='Precipitation')
```

## Simple representación de datos espaciales {.smaller}

Podemos almacenar datos espaciales en un `data.frame`

```{r}
wst <- data.frame(longitude, latitude, name, precip)
wst
```

# 2.  Datos espaciales vectoriales {background-color='grey'}


## Simple Feature `{sf}` {.smaller}


- Utilizaremos `{sf}`  

- Tener cuidado ya que el más utilizado es `{sp}` (mas antiguo)
- Muchos ejemplos o incluso usos que vean por ahí estarán con los tipos de datos definidos por `{sp}`

- `{sp}` está siendo reemplazado por `{sf}`

>__Simple Feature:__ se refiere a un estándar formal (ISO 19125-1: 2004) que describe cómo los objetos en el mundo real se pueden representar en computadoras, con énfasis en la geometría espacial de estos objetos.


## Simple Feature `{sf}`: Dimensiones {.smaller}

- Todas las geometrias (puntos, lineas, polígonos) están formadas por puntos.

- 2, 3, o 4 dimensiones

- Todos los puntos en una geometría tienen la misma dimensión

- Ademas de `X` e `Y` hay dos opciones

  - coordinada `Z` para altitud

  - coordinada `M` medición asociada con el punto (ej, tiempo en que fue medido)
  
## Simple Feature `{sf}`: __Dimensiones__ {.smaller}

- Cuatro casos posibles:

  - 2D (X,Y), (E, N), (Lon,Lat): `XY`

  - 3D : `XYZ`

  - 3D : `XYM`

  - 4D : `XYZM`

## Simple Feature `{sf}` {.smaller}

__Tipos de geometrías__

|Tipo                 | Descripción  |
|---------------------|--------------|
| `POINT`               | geometría dimensión cero, un punto|
| `LINESTRING`          | varios puntos, secuencia de puntos conectados por líneas rectas que no se intersecan; geometría unidimensional   |
| `POLYGON`             | geometría con un área positiva (bidimensional); la secuencia de puntos forma un anillo cerrado que no se interseca  |
| `MULTIPOINT`	        | grupo de `POINT`  |
| `MULTILINESTRING`   	| grupo de `LINESTRING`   |
| `MULTIPOLYGON`	      | grupo de `POLYGON`  |
| `GEOMETRYCOLLECTION`  | grupo de geometrías de cualquier tipo  |


## Simple Feature `{sf}`: __Clases__ {.smaller}

`Geometria` -> `list-column` (tipo de dato)

`Atributos` -> `data.frame`  

<br>

Como `{sf}` almacena las `Simple Features`. Las tres tipos de datos utilizados para representarlos son:

  - `sf`: la tabla (`data.frame`) con los atributos y geometría de la entidad , que contiene  
  - `sfc` : la `list-colum` con la geometría de cada entidad (registro), que está compuesto de  

  - `sfg`: la geometría de la entidad de cada `simple feature` individual

## Simple Feature `{sf}`: __Clase `sf`__ {.smaller}

```{r}
library(sf)
nc <- st_read(system.file("shape/nc.shp", package="sf"))
```      

## Simple Feature `{sf}`: __Clase `sf`__ {.smaller}

```{r fig.height=5}
plot(nc[1])
```   

## Simple Feature `{sf}`: __Clase `sf`__ {.smaller}

```{r}
class(nc)
```   

## Simple Feature `{sf}`: __Clase `sf`__ {.smaller}

```{r}
lapply(attributes(nc),'head')
```     

## Simple Feature `{sf}`: __Clase `sf`__ {.smaller}

```{r}
print(nc[9:15], n = 3)
```     

## Simple Feature `{sf}`: __Clase `sf`__ {.smaller}

![](../img/sf_xfig.png)

<i style="color:green">VERDE: Simple Feature individual, atributos + geometría  </i>  
<i style="color:blue">AZUL:  geometría (objeto de clase `sfg`)  </i>  
<i style="color:red">ROJO: Simple Feature `list-column` (`sfc`) </i>

## Estructura datos espaciales vectoriales con {sf} {.smaller}

`sfc` (simple feature list-column)

### Simple Feature `{sf}`: __Clase `sfc`__ {.smaller}

```{r}
(nc_geom <- st_geometry(nc))
```

## Simple Feature `{sf}`: __Clase `sfc`__ {.smaller}

```{r}
class(nc_geom)
nc_geom[[1]]
class(nc_geom[[1]])
```

## Simple Feature `{sf}`: __Clase `sfc`__ {.smaller}

```{r fig.height=6}
plot(nc_geom[[1]])
```

## Simple Feature `{sf}`: Clase `sfc` {.smaller}

```{r fig.height=6}
names(attributes(nc_geom))
attr(nc_geom,'crs')
```

## Simple Feature `{sf}`: Clase `sfg` {.smaller}

`sfg` (simple feature geometry) guarda la geometría de un a entidad individual, ej. un punto, una linea o polígono

Está implementada en en tipos de datos nativos de R (numeric, matrix, list), siguiendo la siguiente regla:

1. un `POINT` es unj vector numérico
2. un grupo de puntos, e.j. un `LINESTRING` o un anillo de un `POLYGON` es un `matrix` y cada fila de la `matrix` es un `POINT`
3. cualquier otro grupo es un `list`

## Simple Feature `{sf}`: Clase `sfg` {.smaller}

```{r}
(x <- st_point(c(1,2)))
str(x)
(x <- st_point(c(1,2,3)))
str(x)
```

## Simple Feature `{sf}`: Clase `sfg` {.smaller}

```{r}
(x <- st_point(c(1,2,3), "XYM"))
str(x)
(x <- st_point(c(1,2,3,4)))
str(x)
```

## Simple Feature `{sf}`: Clase `sfg` {.smaller}

```{r}
st_zm(x, drop = TRUE, what = "ZM")
```

## Simple Feature `{sf}`: Clase `sfg` {.smaller}

```{r}
p <- rbind(c(3.2,4), c(3,4.6), c(3.8,4.4), c(3.5,3.8), c(3.4,3.6), c(3.9,4.5))
(mp <- st_multipoint(p))
s1 <- rbind(c(0,3),c(0,4),c(1,5),c(2,5))
(ls <- st_linestring(s1))
s2 <- rbind(c(0.2,3), c(0.2,4), c(1,4.8), c(2,4.8))
s3 <- rbind(c(0,4.4), c(0.6,5))
(mls <- st_multilinestring(list(s1,s2,s3)))

```

## Simple Feature `{sf}`: Clase `sfg` {.smaller}

```{r}
p1 <- rbind(c(0,0), c(1,0), c(3,2), c(2,4), c(1,4), c(0,0))
p2 <- rbind(c(1,1), c(1,2), c(2,2), c(1,1))
pol <-st_polygon(list(p1,p2))
p3 <- rbind(c(3,0), c(4,0), c(4,1), c(3,1), c(3,0))
p4 <- rbind(c(3.3,0.3), c(3.8,0.3), c(3.8,0.8), c(3.3,0.8), c(3.3,0.3))[5:1,]
p5 <- rbind(c(3,3), c(4,2), c(4,3), c(3,3))
(mpol <- st_multipolygon(list(list(p1,p2), list(p3,p4), list(p5))))
(gc <- st_geometrycollection(list(mp, mpol, ls)))
```

## Simple Feature `{sf}`: Clase `sfg` {.smaller}

```{r eval = FALSE}
par(mfrow=c(2,3))
plot(mp,col='red',main = 'MULTIPOINT')
plot(ls,col='red',main = 'LINESTRING')
plot(mls,col='red',main = 'MULTILINESTRING')
plot(pol,col = 'gray',border='red',main = 'POLIGON')
plot(mpol,col = 'gray',border='red',main = 'MULTIPOLIGON')
plot(gc,col = 'gray',border='red',main = 'GEOMETRY')

```

## Simple Feature `{sf}`: Clase `sfg` {.smaller}

```{r echo=FALSE,fig.height=6,fig.width=10}
par(mfrow=c(2,3))
plot(mp,col='red',main = 'MULTIPOINT')
plot(ls,col='red',main = 'LINESTRING')
plot(mls,col='red',main = 'MULTILINESTRING')
plot(pol,col = 'gray',border='red',main = 'POLIGON')
plot(mpol,col = 'gray',border='red',main = 'MULTIPOLIGON')
plot(gc,col = 'gray',border='red',main = 'GEOMETRY')

```

# 3.  Datos espaciales raster {background-color='#EBF8B8'}

## ¿Con qué vamos a trabajas? {.smaller}

1. Vamos a utilizar el paquete `{terra}`

2.  `{terra}` está reemplazando a `{raster}`, ya que es más simple y rapido.

3. Pero, similar a `{sp}`, mucha información que encuentren estará con `{raster}`

4. Similar es lo que pasa con `{stars}`, no obstante el futuro de `r-spatial` será con `{stars}`, `{terra}` y `{sf}`

##  {terra} {.smaller}

El paquete `{terra}` tiene funciones para crear, leer, manipular y guardar datos raster.

Las clase definida por `{terra}` es `SpatRaster`

##  {terra} {.smalller}

- representa un raster multi-capa
- siempre almacena los parametros fundamentales que describen la geometria
  - número de columnas y filas
  - extensión espacial
  - sistema de referencia de coordenadas (SRC)
  - adicionalmente guarda información del archivo en donde se almacenan los valores del raster.
  - O, si no existe el archvio es por que `SpatRaster` lo puede almacenar en memoria.

## Crear un `SpatRaster` {.smaller}

```{r}
library(terra)
(r <- rast(ncol=10, nrow=10, xmax=-80, xmin=-150, ymin=20, ymax=60))
```

## Crear un `SpatRaster` {.smaller}

El objeto `r` solo tiene el esqueleto del raster, pero aún no tiene valores

```{r}
values(r) <- 1:ncell(r)
r

```

## Crear un `SpatRaster` {.smaller}

El objeto `r` solo tiene el esqueleto del raster, pero aún no tiene valores

```{r,fig.height=6}
plot(r)
text(r,digits = 2)
```

## Crear un `SpatRaster` {.smaller}

También le podria asignar otros valores, por ejemplo el número de celda

```{r}
values(r) <- 1:ncell(r)
r
```

## Crear un `SpatRaster` {.smaller}

También le podria asignar otros valores, por ejemplo el número de celda

```{r,fig.height=6}
plot(r) 
text(r)
```

## Crear un `SpatRaster` multi-capa {.smaller}

Puedes creart un objeto multi-capa usando la función `c`

```{r}
r2 <- r * r
r3 <- sqrt(r)
s <- c(r,r2,r3)
s
```

## Crear un `SpatRaster` multi-capa {.smaller}

```{r,fig.height=6,fig.width=10}
plot(s) 
```

# 4. Leer y guardar datos espaciales en R {background-color='blue'}

## Vectoriales {.smaller}

Usando `{sf}`   
  - leer: `st_read`, `read_sf`    
  - guardar: `st_write`, `write_sf`   

## Vectoriales {.smaller}

```{r, error = TRUE}
library(sf)
filename <- system.file("shape/nc.shp", package="sf")
nc <- st_read(filename)
st_write(nc, "nc.shp")
```

---
## Vectoriales {.smaller}

```{r, error = TRUE}
filename <- system.file("shape/nc.shp", package="sf")
nc <- st_read(filename)
st_write(nc, "nc.shp", delete_layer = TRUE)
```

## Vectoriales {.smaller}

Drivers soportados por `GDAL`

```{r }
?st_drivers
```

Listar las capas presentes en un archivo

```{r }
st_layers(system.file("osm/overpass.osm", package="sf"))

```

## Vectoriales {.smaller} {.smaller}

### CRUD (create, read, update, delete)

`GDAL` proporciona CRUD (st_read,read_st,st_write,write_st)

Los siguientes argumentos

- `update=TRUE` actualiza si existe, por defecto es `TRUE`
- `delete_layer=TRUE` abre el archivo y borra la capa, no genera error si el archivo o la capa no existen
- `delete_dsn=TRUE` borra el archvivo si existe. Utilizar con cuidado!


## Rasters {.smaller}

Con `{terra}`   
  - leer: `rast`    
  - guardar: `writeRaster`    

## Rasters {.smaller}

### Leer

La función `rast` se puede utilizar sobre un archvio de una capa o multi-capa

```{r}
library(terra)
f <- system.file("external/rlogo.grd", package="raster")
(r <- rast(f))
```

## Rasters {.smaller}

### Leer

```{r fig.height=5}
plot(r)
```

## Rasters {.smaller}

### Leer archivos locales

Notar que `r` es un `SpatRaster` de tres capas (bandas). Podemos extraer sólo una banda.

La segunda banda
```{r }
r2 <- r[[2]]
r2
```

## Rasters {.smaller}

### Leer archivos HTTP/FTP

Terra usa `GDAL` que tiene soporte para Virtual File Systems.

`/vsizip`, `/vsitar`, `/vsicurl`

Por ejemplo, abrir el producto de precipitación mensual del mes de septiembre año 2021 del producto CHIRPS v2.0 que está almacenado en formato COG (cloud opimized geotiff)

```{r}
url <- 'https://data.chc.ucsb.edu/products/CHIRPS-2.0/global_pentad/cogs/'
name <- 'chirps-v2.0.2023.07.6.cog'
```

## Rasters {.smaller}

### Leer archivos HTTP/FTP

```{r fig.width=12}
x <- rast(paste0('/vsicurl/',url,name))
plot(x)
```

## Rasters {.smaller}

### En Chile

```{r fig.width=4,fig.height=6}
x2 <- crop(x,ext(-75.6443953112, -55.61183, -66.95992, -17.5800118954))
x3 <- app(x2, fun = function(x){ x[x<0] <- NA; return(x)})
plot(x3)
```

## Rasters {.smaller}

### Guardar

Use la función `writeRaster` para guardar datos raster. 

- Debe dar como argumento un objeto `SpatRaster` y un nombre de archivo.

- El formato se identifica por la extensión.

- `overwrite = TRUE` para sobrescribir el archivo

```{r}
x <- writeRaster(x3, filename = 'output.tif', overwrite=TRUE)
```

